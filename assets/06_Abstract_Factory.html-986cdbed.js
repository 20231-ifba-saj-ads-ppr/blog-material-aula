import{_ as n,X as s,Y as a,a2 as e}from"./framework-04c602c1.js";const t={},o=e(`<h1 id="abstract-factory" tabindex="-1"><a class="header-anchor" href="#abstract-factory" aria-hidden="true">#</a> ABSTRACT FACTORY</h1><p>[^GAMMA]</p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao" aria-hidden="true">#</a> Intenção</h2><p>Fornecer uma interface para criação de famílias de objetos relacionados ou dependentes sem especificar suas classes concretas.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como" aria-hidden="true">#</a> Também conhecido como</h2><p>Kit</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao" aria-hidden="true">#</a> Motivação</h2><p>Considere um toolkit para construção de interfaces de usuários que suporte múltiplos estilos de interação (look-and-feel) tais como o Motif e o Presentation Manager. Diferentes estilos de interação definem diferentes apresentações e comportamento para os widgets de uma interface de usuário, tais como barras de rolamento, janelas e botões. Para ser portátil entre vários estilos de aparência, uma aplicação não deve codificar rigidamente seus widgets para um determinado padrão. Instanciando classes específicas de estilo de interação para os widgets pela aplicação toda, torna difícil mudar o estilo no futuro.</p><p>Podemos resolver esse problema definindo uma classe abstrata WidgetFactory que declara uma interface para criação de cada tipo básico de widget. Existe também uma classe abstrata para cada tipo de widget, e subclasses concretas implementam os widgets para interação. A interface de WidgetFactory tem uma operação que retorna um novo objeto widget para cada classe abstrata de widget. Os clientes chamam estas operações para obter instâncias de widget, mas não têm conhecimento das classes concretas que estão usando. Desta forma, os clientes ficam independentes do padrão de interação usado no momento.</p><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iHJY3Gov4fEAIueIaqiKadCIYuiLmZDJqbDBt802-KMLrLmAGA1T3LDJwroKcbYI6fnSb9-JuvHOfA69NK5uPbvAVZbGjfQB2sAiRtv9PXgAsGgf5IMfUIaODa9Cn64HBkC3V6bXDaRGWAIGR0HnaQn2aeLw5vi2BWnpuIw16mqNWMj6LmEs09yoBkUSpDIy4ZqzEvGmG1O6EmVEHsXr01e5IYSm1W00" alt="uml diagram"><figcaption>UML do toolkit</figcaption></figure><p>Existe uma subclasse concreta de WidgetFactory para cada estilo de interação. Cada subclasse implementa as operações para criar o widget apropriado para aquele estilo de interação. Por exemplo, a operação CreateScrollBar aplicada à MotifWidgetFactory instancia e retorna uma barra de rolamento de acordo com o Motif, enquanto que a correspondente operação aplicada à PMWidgetFactory retorna uma barra de rolamento para o Presentation Manager. Os clientes criam widgets exclusivamente através da interface de WidgetFactory e não tem conhecimento das classes que implementam os widgets para um padrão em particular. Em outras palavras, os clientes têm somente que se comprometer com uma interface definida por uma classe abstrata, não uma determinada classe concreta. Uma WidgetFactory também implementa e garante as dependências entre as classes concretas de widgets. Uma barra de rolamento Motif deveria ser usada com um botão Motif e um editor de textos Motif, e essa restrição é garantida automaticamente como conseqüência de usar uma MotifWidgetFactory.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade" aria-hidden="true">#</a> Aplicabilidade</h2><p>Use o padrão Abstract Factory quando:</p><ul><li>um sistema deve ser independente de como seus produtos são criados, compostos ou representados;</li><li>um sistema deve ser configurado como um produto de uma família de múltiplos produtos;</li><li>uma família de objetos-produto for projetada para ser usada em conjunto, e você necessita garantir esta restrição;</li><li>você quer fornecer uma biblioteca de classes de produtos e quer revelar somente suas interfaces, não suas implementações.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura" aria-hidden="true">#</a> Estrutura</h2><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iHJY3Oou4fEAIueIaqiKadCIYuiL7A5SDo3EBwgivk9I009jvwBKn9BKWABybDBa4aSDJIoYJa3HMYukY37E-Nd9HQabgL1Z3AbaZX7fvg1vI45Nrmx3TSGeCkBYudBEoKpDAm7Bekd09WLp7Huv9uJxOAh1oc0SG_pIHXZQdP3bdGpnImErEwJcfO3I18m10000" alt="uml diagram"><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes" aria-hidden="true">#</a> Participantes</h2><ul><li><p><strong>AbstractFactory</strong> (WidgetFactory)</p><ul><li>declara uma interface para operações que criam objetos-produto abstratos.</li></ul></li><li><p><strong>Concrete Factory</strong> (MotifWidgetFactory, PMWidgetFactory)</p><ul><li>implementa as operações que criam objetos-produto concretos.</li></ul></li><li><p><strong>AbstractProduct</strong> (Window, ScrollBar)</p><ul><li>declara uma interface para um tipo de objeto-produto</li></ul></li><li><p><strong>ConcreteProduct</strong> (MotifWindow, MotifScrollBar)</p><ul><li>define um objeto-produto a ser criado pela correspondente fábrica concreta.</li><li>implementa a interface de Abstract Product.</li></ul></li><li><p><strong>Client</strong></p><ul><li>Usa as interfaces declaradas pelas classes AbstractFactory e AbstractProduct.</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes" aria-hidden="true">#</a> Colaborações</h2><ul><li>Normalmente uma única instância de uma classe ConcreteFactory é criada em tempo de execução. Essa fábrica concreta cria objetos-produto que têm uma implementação particular. Para criar diferentes objetos-produto, os clientes deveriam usar uma fábrica concreta diferente.</li><li>AbstractFactory adia a criação dos objetos-produto para as suas subclasses ConcreteFactory.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias" aria-hidden="true">#</a> Consequências</h2><p>O padrão Abstract Factory tem os seguintes benefícios e desvantagens:</p><ol><li>Ele isola as classes concretas. O padrão Abstract Factory ajuda a controlar as classes de objetos criadas por uma aplicação. Uma vez que a fábrica encapsula a responsabilidade e o processo de criar objetos-produto, isola os clientes das classes de implementação. Os clientes manipulam as instâncias através das suas interfaces abstratas. Nomes de classes-produto ficam isolados na implementação da fábrica concreta; eles não aparecem no código do cliente.</li><li>Ele torna fácil a troca de famílias de produtos. A classe de uma fábrica concreta aparece apenas uma vez numa aplicação – isto é, quando é instanciada. Isso torna fácil mudar a fábrica concreta que uma aplicação usa. Ela pode usar diferentes configurações de produtos simplesmente trocando a fábrica concreta. Uma vez que a fábrica abstrata cria uma família completa de produtos, toda família de produtos muda de uma só vez. No nosso exemplo de interface de usuário, podemos mudar de widgets do Motif para widgets do Presentation Manager simplesmente trocando os correspondentes objetosfábrica e recriando a interface.</li><li>Ela promove a harmonia entre produtos. Quando objetos-produto numa família são projetados para trabalharem juntos, é importante que uma aplicação use objetos de somente uma família de cada vez. AbstractFactory torna fácil assegurar isso.</li><li>É difícil de suportar novos tipos de produtos. Estender fábricas abstratas para produzir novos tipos de Produtos não é fácil. Isso se deve ao fato de que a interface de AbstractFactory fixa o conjunto de produtos que podem ser criados. Suportar novos tipos de produto exige estender a interface da fábrica, o que envolve mudar a classe AbstractFactory e todas as suas subclasses. Discutimos uma solução para este problema na seção de Implementação.</li></ol><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao" aria-hidden="true">#</a> Implementação</h2><ul><li>A classe AbstractFactory é aquela que determina o tipo real do objeto concreto e o cria, mas retorna uma referência abstrata ao objeto concreto recém-criado.</li><li>Isso determina o comportamento do cliente que pede à fábrica para criar um objeto de um determinado tipo abstrato e retornar o ponteiro abstrato para ele, impedindo que o cliente saiba algo sobre a criação real do objeto.</li><li>O fato da fábrica retornar um ponteiro abstrato para o objeto criado significa que o cliente não tem conhecimento do tipo do objeto. Isso implica que não há necessidade de incluir nenhuma declaração de classe relacionada ao tipo concreto, o cliente lida o tempo todo com o tipo abstrato.</li><li>Os objetos do tipo concreto, criados pela fábrica, são acessados pelo cliente apenas através da interface abstrata. A segunda implicação dessa maneira de criar objetos é que, ao adicionar novos tipos concretos, basta modificar o código do cliente e fazer com que ele use uma fábrica diferente, o que é muito mais fácil do que instanciar um novo tipo, o que requer alteração o código sempre que um novo objeto é criado.</li></ul><p>A implementação clássica para o padrão Abstract Factory é a seguinte:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractProductA</span> 
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operationA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operationA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ProductA1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductA</span> 
<span class="token punctuation">{</span>
	<span class="token class-name">ProductA1</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token operator">+</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 
	<span class="token comment">// Implement the code here</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ProductA2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductA</span> 
<span class="token punctuation">{</span>
	<span class="token class-name">ProductA2</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token operator">+</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 
	<span class="token comment">// Implement the code here</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationA1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationA2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractProductB</span> 
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operationB1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operationB2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ProductB1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductB</span> 
<span class="token punctuation">{</span>
	<span class="token class-name">ProductB1</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token operator">+</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 
	<span class="token comment">// Implement the code here</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ProductB2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractProductB</span> 
<span class="token punctuation">{</span>
	<span class="token class-name">ProductB2</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token operator">+</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> 
	<span class="token comment">// Implement the code here</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> 
<span class="token punctuation">{</span>
	<span class="token keyword">abstract</span> <span class="token class-name">AbstractProductA</span> <span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">abstract</span> <span class="token class-name">AbstractProductB</span> <span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteFactory1</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span> 
<span class="token punctuation">{</span>
	<span class="token class-name">AbstractProductA</span> <span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductA1</span><span class="token punctuation">(</span><span class="token string">&quot;ProductA1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">AbstractProductB</span> <span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductB1</span><span class="token punctuation">(</span><span class="token string">&quot;ProductB1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteFactory2</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFactory</span> 
<span class="token punctuation">{</span>
	<span class="token class-name">AbstractProductA</span> <span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductA2</span><span class="token punctuation">(</span><span class="token string">&quot;ProductA2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">AbstractProductB</span> <span class="token function">createProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProductB2</span><span class="token punctuation">(</span><span class="token string">&quot;ProductB2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">//Factory creator - an indirect way of instantiating the factories</span>
<span class="token keyword">class</span> <span class="token class-name">FactoryMaker</span> 
<span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AbstractFactory</span> pf<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token keyword">static</span> <span class="token class-name">AbstractFactory</span> <span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> choice<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			pf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcreteFactory1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			pf<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ConcreteFactory2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> 
		<span class="token keyword">return</span> pf<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// Client</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span>
<span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token class-name">AbstractFactory</span> pf<span class="token operator">=</span><span class="token class-name">FactoryMaker</span><span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">AbstractProductA</span> product<span class="token operator">=</span>pf<span class="token punctuation">.</span><span class="token function">createProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//more function calls on product</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo" aria-hidden="true">#</a> Exemplo de código</h2><p>Nesse exemplo foi utilizado dois tipos de hambúger para de dois tipos de lugares do mundo para inlustar o mecanismo da Abstract Factory:</p><ol><li>Primeiro é criado uma classe abstract chamada <strong>FabricaAbstrataHamburger</strong> que contem duas assinturas de metódos:</li></ol><ul><li><strong>criarHamburgerGourmet()</strong> que retorna um objeto do tipo <strong>HamburgerGourmet</strong></li><li><strong>criarHamburgerNormal()</strong> que retorna um objeto do tipo <strong>HamburgerNormal</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FabricaAbstrataHamburger</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">HamburgerGourmet</span> <span class="token function">criarHamburgerGourmet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">HamburgerNormal</span>  <span class="token function">criarHamburgerNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Agora apartir dessa fábrica abstrata, criamos duas outras concretas:</li></ol><ul><li><strong>HamburgerBrasileiro</strong> que representa um hambúrger do tipo brasileiro</li><li><strong>HamburgerUSA</strong> que representa um hambúrger do tipo norte-americano</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HamburgerUSA</span> <span class="token keyword">implements</span> <span class="token class-name">FabricaAbstrataHamburger</span><span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">HamburgerGourmet</span> <span class="token function">criarHamburgerGourmet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HamburgerGourmet</span><span class="token punctuation">(</span><span class="token string">&quot;Com Gergerlin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Beacon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cheddar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Molho barbecue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">HamburgerNormal</span> <span class="token function">criarHamburgerNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HamburgerNormal</span><span class="token punctuation">(</span><span class="token string">&quot;Com Gergerlin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Beacon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cheddar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HamburgerBrasileiro</span> <span class="token keyword">implements</span> <span class="token class-name">FabricaAbstrataHamburger</span><span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">HamburgerGourmet</span> <span class="token function">criarHamburgerGourmet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HamburgerGourmet</span><span class="token punctuation">(</span><span class="token string">&quot;Com Gergerlin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Picanha&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Cheddar&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Molho barbecue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">HamburgerNormal</span> <span class="token function">criarHamburgerNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HamburgerNormal</span><span class="token punctuation">(</span><span class="token string">&quot;Pão de hambúrger&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Carne de hambúrger &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Quijo minas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Sem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    
    
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ambos retornam nos metodos implemetados atravez da classe abstarata, dois objetos:</p><ul><li>No método <strong>criarHamburgerGourmet()</strong>, um obejto <strong>HamburgerGourmet</strong></li><li>No método <strong>criarHamburgerNormal()</strong>, um obejto <strong>HamburgerNormal</strong></li></ul><ol start="3"><li>Agora só restou criar as duas classes que representar os objetos <strong>HamburgerGourmet</strong> e <strong>HamburgerNormal</strong> elas repesentam os dois estilos de hambúrgers em si.</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">class</span> <span class="token class-name">HamburgerGourmet</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tipoDoPao<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tipoDaCarne<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tipoDoQueijo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tipoDoMolho<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">HamburgerGourmet</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDoPao<span class="token punctuation">,</span> <span class="token class-name">String</span> tipoDaCarne<span class="token punctuation">,</span> <span class="token class-name">String</span> tipoDoQueijo<span class="token punctuation">,</span> <span class="token class-name">String</span> tipoDoMolho<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoPao    <span class="token operator">=</span> tipoDoPao<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDaCarne  <span class="token operator">=</span> tipoDaCarne<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoQueijo <span class="token operator">=</span> tipoDoQueijo<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoMolho  <span class="token operator">=</span> tipoDoMolho<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;HamburgerGourmet{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;tipoDoPao=&quot;</span> <span class="token operator">+</span> tipoDoPao <span class="token operator">+</span> <span class="token string">&quot;, tipoDaCarne=&quot;</span> <span class="token operator">+</span> tipoDaCarne <span class="token operator">+</span> <span class="token string">&quot;, tipoDoQueijo=&quot;</span> <span class="token operator">+</span> tipoDoQueijo <span class="token operator">+</span> <span class="token string">&quot;, tipoDoMolho=&quot;</span> <span class="token operator">+</span> tipoDoMolho <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTipoDoPao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tipoDoPao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTipoDoPao</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDoPao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoPao <span class="token operator">=</span> tipoDoPao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTipoDaCarne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tipoDaCarne<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTipoDaCarne</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDaCarne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDaCarne <span class="token operator">=</span> tipoDaCarne<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTipoDoQueijo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tipoDoQueijo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTipoDoQueijo</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDoQueijo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoQueijo <span class="token operator">=</span> tipoDoQueijo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTipoDoMolho</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tipoDoMolho<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTipoDoMolho</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDoMolho<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoMolho <span class="token operator">=</span> tipoDoMolho<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">class</span> <span class="token class-name">HamburgerNormal</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tipoDoPao<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tipoDaCarne<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tipoDoQueijo<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> tipoDoMolho<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">HamburgerNormal</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDoPao<span class="token punctuation">,</span> <span class="token class-name">String</span> tipoDaCarne<span class="token punctuation">,</span> <span class="token class-name">String</span> tipoDoQueijo<span class="token punctuation">,</span> <span class="token class-name">String</span> tipoDoMolho<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoPao    <span class="token operator">=</span> tipoDoPao<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDaCarne  <span class="token operator">=</span> tipoDaCarne<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoQueijo <span class="token operator">=</span> tipoDoQueijo<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoMolho  <span class="token operator">=</span> tipoDoMolho<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;HamburgerNormal{&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;tipoDoPao=&quot;</span> <span class="token operator">+</span> tipoDoPao <span class="token operator">+</span> <span class="token string">&quot;, tipoDaCarne=&quot;</span> <span class="token operator">+</span> tipoDaCarne <span class="token operator">+</span> <span class="token string">&quot;, tipoDoQueijo=&quot;</span> <span class="token operator">+</span> tipoDoQueijo <span class="token operator">+</span> <span class="token string">&quot;, tipoDoMolho=&quot;</span> <span class="token operator">+</span> tipoDoMolho <span class="token operator">+</span> <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
   
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTipoDoPao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tipoDoPao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTipoDoPao</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDoPao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoPao <span class="token operator">=</span> tipoDoPao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTipoDaCarne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tipoDaCarne<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTipoDaCarne</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDaCarne<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDaCarne <span class="token operator">=</span> tipoDaCarne<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTipoDoQueijo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tipoDoQueijo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTipoDoQueijo</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDoQueijo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoQueijo <span class="token operator">=</span> tipoDoQueijo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTipoDoMolho</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> tipoDoMolho<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTipoDoMolho</span><span class="token punctuation">(</span><span class="token class-name">String</span> tipoDoMolho<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tipoDoMolho <span class="token operator">=</span> tipoDoMolho<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
      
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Por fim vamos só visualizar os resultados:</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HamburgerBrasileiro</span> brBurger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HamburgerBrasileiro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HamburgerUSA</span> usaBurger       <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HamburgerUSA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brBurger<span class="token punctuation">.</span><span class="token function">criarHamburgerNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>brBurger<span class="token punctuation">.</span><span class="token function">criarHamburgerGourmet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>usaBurger<span class="token punctuation">.</span><span class="token function">criarHamburgerNormal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>usaBurger<span class="token punctuation">.</span><span class="token function">criarHamburgerGourmet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//Saida

//Hambúrger Brasileiro
HamburgerNormal{tipoDoPao=Pão de hambúrger, tipoDaCarne=Carne de hambúrger , tipoDoQueijo=Queijo minas, tipoDoMolho=Sem}
HamburgerGourmet{tipoDoPao=Com Gergerlin, tipoDaCarne=Picanha, tipoDoQueijo=Cheddar, tipoDoMolho=Molho barbecue}

//Hambúrger Norte-americano
HamburgerNormal{tipoDoPao=Com Gergerlin, tipoDaCarne=Beacon, tipoDoQueijo=Cheddar, tipoDoMolho=sem}
HamburgerGourmet{tipoDoPao=Com Gergerlin, tipoDaCarne=Beacon, tipoDoQueijo=Cheddar, tipoDoMolho=Molho barbecue}


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>Vejamos esse código em um diagrama UML</li></ol><img src="https://www.plantuml.com/plantuml/svg/fPB12i8m44Jl-nKvAb8GFq1I1VNaHJpBDWO990riDYVntwNQrfQqAdfRPYOlio4oC197Pq4sapZD5u15O4B5GbaCGMom8ACmVwYCEtH5f8kcAuYP8eFKAbiVoMcUJ1DdxycXhOmR2AZ1hNiyvB_24jQAC1Yh3Va_-esjBB9isQlzRVJL2c1jZIuvHGtfdNCTU-nEW2wmJwftXm7qSF0Dw_bQdr5r3gGkpzKtQuOx" alt="uml diagram"><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos" aria-hidden="true">#</a> Usos conhecidos</h2><p>InterViews usa o sufixo “Kit” [Lin92] para denotar classes AbstractFactory. Ela define fábricas abstratas WidgetKit e DialogKit para geração de objetos específicos da interface de usuário para interação. InterViews também inclui LayoutKit, que gera diferentes objetos por composição dependendo do layout desejado. Por exemplo, um layout que é conceitualmente horizontal pode exigir diferentes objetos compostos, dependendo da orientação do documento (retrato ou paisagem). ET++ [WGM88] usa o padrão Abstract Factory para obter portabilidade entre diferentes sistemas de janelas (X Windows e SunView, por exemplo). A classe abstrata base WindowSystem define a interface para criar objetos que representam recursos do sistema de janelas (MakeWindow, MakeFont, MakeColor, por exemplo). As subclasses concretas implementam as interfaces para um sistema de janelas específico. Em tempo de execução, ET++ cria uma instância de uma subclasse concreta WindowSystem que cria objetos concretos para os recursos do sistema.</p><h2 id="padrao-relacionados" tabindex="-1"><a class="header-anchor" href="#padrao-relacionados" aria-hidden="true">#</a> Padrão relacionados</h2><p>As classes AbstractFactory são freqüentemente implementadas com métodos-fábrica Factory Method, mas elas também podem ser implementadasusando Prototype. Uma fábrica concreta é freqüentemente um singleton.</p><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Referências</h2><ul><li><strong>ERICK GAMMA</strong>, Padrões de Projetos: Soluções Reutilizáveis de Software Orientados a Objetos, Bookman; 1ª edição (1 janeiro 2000)</li><li><strong>ABSTRACT FACTORY PATTERN - STARTERTUTORIALS</strong>, https://www.startertutorials.com/patterns/abstract-factory-pattern.html</li><li><strong>REFACTORING GURU:</strong> https://refactoring.guru/pt-br/design-patterns/abstract-factory</li></ul>`,52),p=[o];function c(i,l){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","06_Abstract_Factory.html.vue"]]);export{u as default};
