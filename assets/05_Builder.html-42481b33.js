import{_ as c,X as i,Y as l,Z as n,a0 as a,a1 as t,$ as s,a2 as u,E as o}from"./framework-04c602c1.js";const r={},d=u(`<h1 id="builder-gof" tabindex="-1"><a class="header-anchor" href="#builder-gof" aria-hidden="true">#</a> Builder (GOF)</h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao" aria-hidden="true">#</a> Intenção</h2><p>Permite a separação da criação de objetos complexos de suas representações, produzindo diferentes tipos e representações do objeto com o mesmo processo de construção.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como" aria-hidden="true">#</a> Também conhecido como</h2><p>Constructor</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao" aria-hidden="true">#</a> Motivação</h2><p>Um leitor de um documento em RTF (Rich Text Format) deveria ser capaz de converter RTF em muitos formatos de texto. O leitor poderia converter documentos RTF em texto ASCII comum ou widget de texto, que possa ser editado interativamente. O problema, contudo, é que o número de conversões possíveis é aberto. Por isso, deve ser fácil acrescentar uma nova conversão sem modificar o leitor.</p><p>Uma solução é configurar a classe RTFReader com um objeto TextConverter que converte RTF para uma outra representação de textos. À medida que o RTFReader analisa o documento RTF, ele usa o objeto TextConverter para efetuar a conversão. Sempre que o RTFReader reconhece um símbolo RTF (texto simples, ou uma palavra de controle do RTF), ele emite uma solicitação para o TextConverter para converter esse símbolo. Os objetos TextConverter são responsáveis tanto por efetuar a conversão dos dados como pela representação do símbolo num formato particular.</p><p>As subclasses de TextConverter se especializam em diferentes conversões e formatos. Por exemplo, um ASCIIConverter ignora solicitações para converter qualquer coisa, exceto texto simples. Por outro lado, um TeXConverter implementará operações para todas as solicitações visando produzir uma representação TEX que capture toda a informação estilística do texto. Um TextWidgetConverter produzirá um objeto para uma interface de usuário complexa que permite ao usuário ver e editar o texto.</p><figure><img src="https://www.plantuml.com/plantuml/svg/jLD1ReCm4Bpx5Nk4GtX0rKP1I6bpQIEAr5uTsCQeO4VsfadKHkeV-iE-f3Ou2P0SUia1iUmCEpDucHZYcjPrnIR7YkKLDmRIR9eYBr1_CW2OSstGjeAGxG-C3BUKAFc1cZpBFoM2QvxRPf3RAkmWKoKTAfSOkB8BMGM-r7mbkXBnSpAR_LVZ7gdXErzzdw_NiTbgsl7dYbjwAOibqdM5ZLTfjQKYX8KYKZMejzC1Mlf6b1L2G707bWua4AJr2AJUKORGc0EpAIaNG56sMw7lMVc7EBs1nRgixAZVxvznelePA79r29u_VNhC1lnXD8gQS8Stvd4QNtfZa1Zsp5qe2t196MF7XA16u_uwtlXnZFNQjr-ZqM2fu0AZkp4NuRFZPMmmDOh6SDn6v-8qqK5-QLfxWrajVcZRdA8i4B1UqGuuaIuNQqBJxTP8GXM6JUp7QNxczlu7" alt="uml diagram"><figcaption>Motivação Builder.</figcaption></figure><p>Cada tipo de classe conversora implementa o mecanismo para criação e montagem de um objeto complexo, colocando-o atrás de uma interface abstrata. O conversor é separado do leitor, que é responsável pela análise de um documento RTF.</p><p>O padrão Builder captura todos estes relacionamentos. Cada classe conversora é chamada um <strong>builder</strong> no padrão, e o leitor é chamado de <strong>director</strong>. Aplicado a este exemplo, o Builder separa o algoritmo para interpretar um formato de texto (isto é, o analisador de documentos RTF) de como um formato convertido é criado e representado. Isso nos permite reutilizar o algoritmo de análise (parsing) do RTFReader para criar diferentes representações de texto a partir de documentos RTF – simplesmente configure o RTFReader com diferentes subclasses de TextConverter.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade" aria-hidden="true">#</a> Aplicabilidade</h2><p>Use o padrão Builder quando:</p><ul><li>o algoritmo para criação de um objeto complexo deve ser independente das partes que compõem o objeto e de como elas são montadas;</li><li>existem classes com construtores com muitos parâmetros opcionais ou classes que tenham muitas versões de construtores sobrecarregadas;</li><li>você precisa que seu código permita a criação de diferentes representações de um Objeto. Ex: Casa --&gt; Casa de Madeira e Casa de Pedra;</li><li>você quer construir uma árvore de Objetos utilizando o <strong>Composite</strong>;</li></ul><h2 id="um-pouco-sobre-o-composite" tabindex="-1"><a class="header-anchor" href="#um-pouco-sobre-o-composite" aria-hidden="true">#</a> Um pouco sobre o Composite</h2><p>O Composite é um padrão de projeto estrutural que permite que a composição de objetos em estruturas de árvores que representam hierarquias partes-todo. Após a composição, estas estruturas podem ser utilizadas da mesma maneira que objetos individuais.</p><p>Usar o padrão Composite faz sentido apenas quando o modelo central de sua aplicação pode ser representada como uma árvore. Por exemplo, imagine que você tem dois tipos de objetos: <strong>Produtos</strong> e <strong>Caixas</strong>. Uma <strong>Caixa</strong> pode conter diversos <strong>Produtos</strong> bem como um número de <strong>Caixas</strong> menores. Essas <strong>Caixas</strong> menores também podem ter alguns <strong>Produtos</strong> ou até mesmo <strong>Caixas</strong> menores que elas, e assim em diante..</p><p>Nesse tipo de cenário, seria possivel utilizar o Builder para criar as árvores Composite complexas (representadas pelas <strong>Caixas</strong>) porque o Builder permite que você programe as etapas de construção para trabalhar recursivamente. Facilitando assim a criação de objetos em estruturas de árvore para a utilização do padrão Composite.</p><p>Builder e Composite são popularmente utilizados em conjunto, devido a essa combinação de construção e organização de objetos complexos.</p><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura" aria-hidden="true">#</a> Estrutura</h2><p>O Padrão Builder possui uma estrutura com 4 participantes, como ilustrado abaixo :</p><figure><img src="https://www.plantuml.com/plantuml/svg/NP31Ri8m38RlVWeVsQ5z03IXQY3jYdY3D77NI4qyESu1TRmxWJOLusGxjh_ylxkaHZI72Rejyr591cC9lxAV7CaCp-HS-hiFk07OoQI49ozabMkR1Fibmf5ZKibs7O-iX3shSa0UjZqOMCZO4RrIG1znsSb2E0DYfRN_FwVey044W0f2RWvLwxvgM4KMALP8QRDImFXAVDJVf1TAULhrRdu-_vhcdG1lDJRYVqPjsmEUXLqnK02ZTuGKVlMAHbLydvNIwsiW7Tabw8gTv_MNU0S0" alt="uml diagram"><figcaption>Estrutura Builder.</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes" aria-hidden="true">#</a> Participantes</h2><ul><li><p><strong>Builder</strong> (TextConverter)</p><ul><li>define uma interface com as configurações em comum para todos os objetos que são baseados nesse Builder. Director usa esta interface para chamar o método definido por um ConcreteBuilder.</li></ul></li><li><p><strong>ConcreteBuilder</strong> (ASCIIConverter, TeXConverter, TextWidgetConverter)</p><ul><li>implementa métodos para a construção e montagem em partes do produto, usando a interface de Builder.</li><li>Não expõe o produto durante a montagem, mantém a representação até o objeto ser recuperado.</li><li>ConcreteBuilders devem fornecer seus próprios métodos para recuperar os resultados de construções, já que os produtos gerados podem ser completamente diferentes.</li></ul></li><li><p><strong>Director</strong> (RTFReader)</p><ul><li>Mantém uma instancia de um Builder passado pelo cliente.</li><li>atua como controlador do Builder passado e implementa métodos visando a execução sequencial correta e a organização das etapas de configuração para cada tipo de situação.</li></ul></li><li><p><strong>Product</strong> (ASCIIText, TeXText, TextWidget)</p><ul><li>representa o objeto complexo em construção. ConcreteBuilder constrói a representação interna do produto e define o as etapas de montagem;</li><li>inclui classes que definem as diversas partes que constituem o objeto complexo, inclusive as interfaces para a montagem das partes no resultado final.</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes" aria-hidden="true">#</a> Colaborações</h2><ul><li>O cliente cria o objeto Director e o configura com o objeto Builder desejado.</li><li>Director utiliza o Builder para notificar que o processo de montagem de uma parte do produto deve ser executado.</li><li>Builder trata solicitações do Director e acrescenta partes ao produto.</li><li>O cliente recupera o produto após a montagem do Builder.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias" aria-hidden="true">#</a> Consequências</h2><p>O padrão Builder tem os seguintes benefícios e desvantagens:</p><h3 id="beneficios" tabindex="-1"><a class="header-anchor" href="#beneficios" aria-hidden="true">#</a> Benefícios</h3><ol><li>Permite a construção de objetos passo a passo, pular certas etapas de construção ou rodar etapas recursivamente.</li><li>Mantém a lógica complexa de construção isolada da lógica de negócio do produto, melhorando a modularidade pelo encapsulamento da forma que um objeto é construido e representado.</li><li>Permite a variação da representação interna do produto, já que o diretor somente tem acesso a uma interface abstrata Builder, ocultando a estrutura interna do produto e como ele é construido, logo, para adicionar ou modificar uma representação só é preciso definir um novo tipo de construtor.</li></ol><h3 id="desvantagens" tabindex="-1"><a class="header-anchor" href="#desvantagens" aria-hidden="true">#</a> Desvantagens</h3><ol><li>A complexidade do código aumenta, já que o padrão necessita da criação de múltiplas classes novas.</li></ol><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao" aria-hidden="true">#</a> Implementação</h2><p>Eis um exemplo para representar a implementação do padrão <strong>Builder</strong> em java:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPart</span><span class="token punctuation">(</span><span class="token class-name">Part</span> productPart<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// define a montagem de uma parte</span>
     <span class="token comment">//Part é uma classe abstrata</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Part</span> productPart<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPart</span><span class="token punctuation">(</span><span class="token class-name">Part</span> productPart<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>productPart <span class="token operator">=</span> productPart<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

     <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span>productPart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Builder</span> builder<span class="token punctuation">;</span>

     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constructProduct</span><span class="token punctuation">(</span><span class="token class-name">Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Part</span> exempleProductPart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpecificProductPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// SpecificProductPart representa uma classe que implementa a classe abstrata Part</span>

        builder<span class="token punctuation">.</span><span class="token function">buildPart</span><span class="token punctuation">(</span>exempleProductPart<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para melhor contextualização, a classe do produto final seria escrita assim:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Part</span> productPart<span class="token punctuation">;</span>
   
    <span class="token keyword">public</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token class-name">Part</span> productPart<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>productPart <span class="token operator">=</span> productPart<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Part</span> <span class="token function">getPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> productPart<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Com essas implementações, este seria o código cliente (código da aplicação):</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Director</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Director usa o objeto ConcreteBuilder dado pelo cliente.</span>
        <span class="token comment">//Isto porque o código cliente sabe qual o builder correto a ser utilizado para gerar um produto especifico.</span>
        <span class="token class-name">ConcreteBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        director<span class="token punctuation">.</span><span class="token function">constructProduct</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//O produto final é retornado pela instância de builder, </span>
        <span class="token comment">//já que director não enxerga e não depende de um concreteBuilder especifico e seu produto final.</span>
        <span class="token class-name">Product</span> product <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//Faz algo com o produto ou constrói outros produtos</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo" aria-hidden="true">#</a> Exemplo de código</h2><p>Consideremos um contexto onde é preciso construir objetos complexos que representam as peças de um jogo de tabuleiro, cada peça tem uma cabeça, um corpo, pés e um equipamento (como uma lança) e o jeito que é permitido se mover. Isto é importante para que cada peça tenha um devido papel baseado nas suas partes. O código a seguir, utiliza o padrão Builder para facilitar a construção de peças padrões do jogo.</p><p>Para facilitar o entendimento, implementaremos primeiro as representações das partes das peças:</p><p>A maioria das partes a seguir são enums, atribuindo um valor representativo e evitando que o código do exemplo seja muito grande.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PieceHead</span> <span class="token punctuation">{</span>
    <span class="token constant">HUMAN</span><span class="token punctuation">,</span> <span class="token constant">LIZARD</span><span class="token punctuation">,</span> <span class="token constant">ROBOT</span><span class="token punctuation">,</span> <span class="token constant">SKELETON</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PieceBody</span> <span class="token punctuation">{</span>
    <span class="token constant">FLESH</span><span class="token punctuation">,</span> <span class="token constant">SCALES</span><span class="token punctuation">,</span> <span class="token constant">METALIC</span><span class="token punctuation">,</span> <span class="token constant">BONES</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">PieceFeet</span> <span class="token punctuation">{</span>
    <span class="token constant">BIPEDS</span><span class="token punctuation">,</span> <span class="token constant">QUADRUPED</span><span class="token punctuation">,</span> <span class="token constant">TANK_TREAD</span><span class="token punctuation">,</span> <span class="token constant">PROPULSOR</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PieceEquipament é criado como uma classe abstrata para definir os papéis obrigatórios que um equipamento deve ter, esta abordagem permite a criação de vários equipamentos diferentes.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PieceEquipament</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> defense<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> attack<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">EquipamentType</span> type<span class="token punctuation">;</span> 
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> broken<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDefense</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAttack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">EquipamentType</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">breakingCondition</span><span class="token punctuation">(</span><span class="token class-name">EquipamentAction</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Agora que temos todas as representações que precisamos, podemos começar a implementar o padrão Builder.</p><p>Código da interface que representa uma peça, apelidado de <strong>BoardPieceBuilder</strong> :</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BoardPieceBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHead</span><span class="token punctuation">(</span><span class="token class-name">PieceHead</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// define a montagem da cabeça</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">PieceBody</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// define a montagem do corpo</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFeet</span><span class="token punctuation">(</span><span class="token class-name">PieceFeet</span> feet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// define a montagem dos pés</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildEquipament</span><span class="token punctuation">(</span><span class="token class-name">PieceEquipament</span> equipament<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// define a montagem do equipamento</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// define o nome personalizado da peça</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A interface define os possiveis parâmetros para a construção de uma peça de tabuleiro, fazendo o papel do participante <strong>Builder</strong>.</p><p>Beseado nisso, agora é possivel implementar um construtor concreto, como nos exemplos a seguir:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KingBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">BoardPieceBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">PieceHead</span> head<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">PieceBody</span> body<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">PieceFeet</span> feet<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">PieceEquipament</span> equipament<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Horse</span> <span class="token function">getKing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">King</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> body<span class="token punctuation">,</span> feet<span class="token punctuation">,</span> equipament<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHead</span><span class="token punctuation">(</span><span class="token class-name">PieceHead</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">PieceBody</span> body<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFeet</span><span class="token punctuation">(</span><span class="token class-name">PieceFeet</span> feet<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>feet <span class="token operator">=</span> feet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildEquipament</span><span class="token punctuation">(</span><span class="token class-name">PieceEquipament</span> equipament<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token operator">=</span> equipament<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span> 

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HorseBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">BoardPieceBuilder</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">PieceHead</span> head<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">PieceBody</span> body<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">PieceFeet</span> feet<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">PieceEquipament</span> equipament<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Horse</span> <span class="token function">getHorse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> body<span class="token punctuation">,</span> feet<span class="token punctuation">,</span> equipament<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHead</span><span class="token punctuation">(</span><span class="token class-name">PieceHead</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">PieceBody</span> body<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFeet</span><span class="token punctuation">(</span><span class="token class-name">PieceFeet</span> feet<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>feet <span class="token operator">=</span> feet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildEquipament</span><span class="token punctuation">(</span><span class="token class-name">PieceEquipament</span> equipament<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token operator">=</span> equipament<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span> 

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>KingBuilder e HorseBuilder fazem o papel de <strong>ConcreteBuilder</strong>, implementando as funções para as respectivas montagens do produto.</p><p>Abaixo é possivel ver, respectivamente, as classes que representam os produtos finais de KingBuilder e HorseBuilder.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">King</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PieceHead</span> head<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PieceBody</span> body<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PieceFeet</span> feet<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PieceEquipament</span> equipament<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MovementType</span> movementType<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">King</span><span class="token punctuation">(</span><span class="token class-name">PieceHead</span> head<span class="token punctuation">,</span> <span class="token class-name">PieceBody</span> body<span class="token punctuation">,</span> <span class="token class-name">PieceFeet</span> feet<span class="token punctuation">,</span> <span class="token class-name">PieceEquipament</span> equipament<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>feet <span class="token operator">=</span> feet<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token operator">=</span> equipament<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoEquipament</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token keyword">instanceof</span> <span class="token class-name">NoEquipament</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>movementType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMovementType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>feet<span class="token punctuation">,</span> <span class="token char">&#39;King&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>movementType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KingMovementType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>feet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equipament<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">getGeneratedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>      
    <span class="token punctuation">}</span>

    
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getGeneratedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> &#39;<span class="token class-name">King</span> <span class="token class-name">Skeleton</span> <span class="token class-name">With</span> <span class="token class-name">Magic</span> <span class="token class-name">Staff</span>&#39;<span class="token punctuation">;</span>
        <span class="token comment">//Representação de um nome gerado </span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PieceHead</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PieceBody</span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> body<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PieceFeet</span> <span class="token function">getFeet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> feet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PieceEquipament</span> <span class="token function">getEquipament</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> equipament<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MovementType</span> <span class="token function">getMovementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> movementType<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">getGeneratedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PieceHead</span> head<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PieceBody</span> body<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PieceFeet</span> feet<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PieceEquipament</span> equipament<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MovementType</span> movementType<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token class-name">PieceHead</span> head<span class="token punctuation">,</span> <span class="token class-name">PieceBody</span> body<span class="token punctuation">,</span> <span class="token class-name">PieceFeet</span> feet<span class="token punctuation">,</span> <span class="token class-name">PieceEquipament</span> equipament<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>feet <span class="token operator">=</span> feet<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token operator">=</span> equipament<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">NoEquipament</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equipament <span class="token keyword">instanceof</span> <span class="token class-name">NoEquipament</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>movementType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMovementType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>feet<span class="token punctuation">,</span> <span class="token char">&#39;Horse&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>movementType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HorseMovementType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>feet<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>equipament<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">getGeneratedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
            
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getGeneratedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> &#39;<span class="token class-name">Cyclope</span> <span class="token class-name">With</span> <span class="token class-name">Lance</span>&#39;<span class="token punctuation">;</span>
        <span class="token comment">//Representação de um nome gerado </span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PieceHead</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PieceBody</span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> body<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PieceFeet</span> <span class="token function">getFeet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> feet<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">PieceEquipament</span> <span class="token function">getEquipament</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> equipament<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MovementType</span> <span class="token function">getMovementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> movementType<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">getGeneratedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Com os participantes Builders e ConcreteBuilders prontos, assim como seus Produtos, agora é possivel implementar O Director responsável por direcionar a solicitação do cliente para a execução correta da montagem das peças, como no exemplo abaixo:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BoardPieceDirector</span> <span class="token punctuation">{</span>
   
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constructHumanWithSword</span><span class="token punctuation">(</span><span class="token class-name">BoardPieceBuilder</span> builder<span class="token punctuation">)</span><span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">buildHead</span><span class="token punctuation">(</span><span class="token class-name">PieceHead</span><span class="token punctuation">.</span><span class="token constant">HUMAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">PieceBody</span><span class="token punctuation">.</span><span class="token constant">FLESH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildFeet</span><span class="token punctuation">(</span><span class="token class-name">PieceFeet</span><span class="token punctuation">.</span><span class="token constant">BIPEDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildEquipament</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SwordEquipament</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constructLizardWithShield</span><span class="token punctuation">(</span><span class="token class-name">BoardPieceBuilder</span> builder<span class="token punctuation">)</span><span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">buildHead</span><span class="token punctuation">(</span><span class="token class-name">PieceHead</span><span class="token punctuation">.</span><span class="token constant">LIZARD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">PieceBody</span><span class="token punctuation">.</span><span class="token constant">SCALES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildFeet</span><span class="token punctuation">(</span><span class="token class-name">PieceFeet</span><span class="token punctuation">.</span><span class="token constant">BIPEDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildEquipament</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShieldEquipament</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constructRobotWithGun</span><span class="token punctuation">(</span><span class="token class-name">BoardPieceBuilder</span> builder<span class="token punctuation">)</span><span class="token punctuation">{</span>
        builder<span class="token punctuation">.</span><span class="token function">buildHead</span><span class="token punctuation">(</span><span class="token class-name">PieceHead</span><span class="token punctuation">.</span><span class="token constant">ROBOT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildBody</span><span class="token punctuation">(</span><span class="token class-name">PieceBody</span><span class="token punctuation">.</span><span class="token constant">METALIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildFeet</span><span class="token punctuation">(</span><span class="token class-name">PieceFeet</span><span class="token punctuation">.</span><span class="token constant">TANK_TREAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildEquipament</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GunEquipament</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Este director é responsavel por construir as peças padrões do jogo, útil para guiar os builders sobre o que fazer e quando fazer.</p><p>Após toda a implementação, a utilização no código cliente seria:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BoardPieceDirector</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoardPieceDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">//Assim como no exemplo de implementação anterior,</span>
        <span class="token comment">//Director (BoardPieceDirector) usa o objeto KingBuilder dado pelo cliente.</span>
        <span class="token comment">//Isto porque o código cliente sabe qual o builder correto a ser utilizado para gerar um produto especifico.</span>

        <span class="token class-name">KingBuilder</span> kingBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KingBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        director<span class="token punctuation">.</span><span class="token function">constructHumanWithSword</span><span class="token punctuation">(</span>kingBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//O produto final é retornado pela instância de builder (neste caso, KingBuilder), </span>
        <span class="token comment">//já que director não enxerga e não depende de KingBuilder e seu produto final.</span>
        <span class="token class-name">King</span> kingProduct <span class="token operator">=</span> kingBuilder<span class="token punctuation">.</span><span class="token function">getKing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//outros Builders..</span>

        <span class="token class-name">HorseBuilder</span> horseBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HorseBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        director<span class="token punctuation">.</span><span class="token function">constructLizardWithShield</span><span class="token punctuation">(</span>horseBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Horse</span> horseProduct <span class="token operator">=</span> horseBuilder<span class="token punctuation">.</span><span class="token function">getHorse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos" aria-hidden="true">#</a> Usos conhecidos</h2><p><strong>Project Lombok</strong> é uma blibioteca Java que utiliza Annotations para gerar código automatico de Builders para classes, facilitando a implementação de construtores e automatizando tarefas repetitivas, como implementar getters e setters para todas as classes.. <sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup>.</p><h2 id="padrao-relacionados" tabindex="-1"><a class="header-anchor" href="#padrao-relacionados" aria-hidden="true">#</a> Padrão relacionados</h2>`,71),k=n("h2",{id:"referencias",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#referencias","aria-hidden":"true"},"#"),s(" Referências")],-1),m=n("hr",{class:"footnotes-sep"},null,-1),v={class:"footnotes"},b={class:"footnotes-list"},y=n("li",{id:"footnote1",class:"footnote-item"},[n("p",null,[s("GAMMA, Erich. et al. Padrões de projetos: Soluções reutilizáveis de software orientados a objetos Bookman editora, 2009. "),n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎")])],-1),f=n("li",{id:"footnote2",class:"footnote-item"},[n("p",null,[s("Shvets, Alexander. EBOOK Mergulho Nos Padrões de Projeto. "),n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎")])],-1),w={id:"footnote3",class:"footnote-item"},g={href:"https://projectlombok.org/features/Builder",target:"_blank",rel:"noopener noreferrer"},h=n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1);function P(B,q){const e=o("RouterLink"),p=o("ExternalLinkIcon");return i(),l("div",null,[d,n("p",null,[a(e,{to:"/XX_Composite.html"},{default:t(()=>[s("Composite")]),_:1}),s(": Como já citado anteriormente, O padrão Composite é geralmente utilizado junto ao Composite devido a praticidade ao criar objetos complexos.")]),n("p",null,[a(e,{to:"/XX_Factory_Method.html"},{default:t(()=>[s("Factory Method")]),_:1}),s(": Muitos projetos começam com o Factory method por ser mais simples e depois evoluem para o Builder por ser mais flexivel (apesar de ser mais complexo).")]),n("p",null,[a(e,{to:"/XX_Singleton.html"},{default:t(()=>[s("Singleton")]),_:1}),s(": Construtores Builder também podem ser implementados como Singletons.")]),k,m,n("section",v,[n("ol",b,[y,f,n("li",w,[n("p",null,[s("Project Lombok "),n("a",g,[s("https://projectlombok.org/features/Builder"),a(p)]),s(" (Acessado em 24/04/2023) "),h])])])])])}const j=c(r,[["render",P],["__file","05_Builder.html.vue"]]);export{j as default};
