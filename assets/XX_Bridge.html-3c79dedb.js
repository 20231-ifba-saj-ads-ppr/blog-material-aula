import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a,d as s,w as t,b as n,e as r}from"./app-67d2117b.js";const d={},u=r(`<h1 id="bridge-gof" tabindex="-1"><a class="header-anchor" href="#bridge-gof" aria-hidden="true">#</a> Bridge (GOF)</h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao" aria-hidden="true">#</a> Intenção</h2><p>Desacoplar uma classe grande ou um conjunto de classes intimamente ligadas em duas hierarquias, separando abstração e implementação para que possam ser desenvolvidas independentemente umas das outras.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como" aria-hidden="true">#</a> Também conhecido como</h2><ul><li><p>Handle/Body</p></li><li><p>Ponte (em português)</p></li></ul><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao" aria-hidden="true">#</a> Motivação</h2><p>Digamos que você tem uma classe de formas geométricas <code>Form</code> com um par de subclasses : <code>Circle</code> e <code>Square</code>. Você quer estender essa hierarquia de classe para incorporar cores, então você planeja criar as subclasses de cores <code>Blue</code> e <code>Red</code>. Contudo, já que você já tem duas subclasses, você precisa criar quatro combinações de classe tais como <code>BlueSquare</code> e <code>RedCircle</code>.</p><p>Adicionar novos tipos de forma e cores à hierarquia irá fazê-la crescer exponencialmente. Por exemplo, para adicionar uma forma de triângulo você vai precisar introduzir duas subclasses, uma para cada cor. E depois disso, adicionando uma nova cor será necessário três subclasses, uma para cada tipo de forma.</p><p>Esse problema ocorre porque estamos tentando estender as classes de forma em duas dimensões diferentes: por forma e por cor. Isso é um problema muito comum com herança de classe.</p><p>O padrão <strong>Bridge</strong> tenta resolver esse problema ao trocar de herança para composição do objeto. Isso significa que você extrai uma das dimensões em uma hierarquia de classe separada, para que as classes originais referenciem um objeto da nova hierarquia, ao invés de ter todos os seus estados e comportamentos dentro de uma classe.</p><figure><img src="https://www.plantuml.com/plantuml/svg/bLFBJiD03BplL_W8X_814OUg5KX8I4Zq2voDqwowZx3hY5Qb_yu-cX1Q3lIIZPqPUyREBWEZvy5eiPpUmaxP7ZqQw57kS4iRFcW2JvBHRZK9SSv3xLKJZwCG05W7zYWPfCOGuDbvSunfWBNJpeDCJv4JZSVFJOSztTtdk5LQPr2EJq9OnmIQMWRNva9LDM4YGfd-eKTb-SKoUPLvP1j8jDH1fNIBaahheY8JtWOEgg5NPIcScryMIWAYXDGLtA9Kg6978OgljV9Iqt4oyhIFL8iwrOpqquZRV0pePxYLsyy_h_H0jmcRgE_KtCmi8wqTipDfgCM5-BsBdnbUe8iNSRswsURWakxLjiiBJ5QhwafivDE-Q4o8qS0_gepMae8wfl_y3T827xyMYz7g59_DYAmxPrBfMHZd6mVMHPr0fkS38BDNzS1HyonhY3lN1B6CFVFzAUSt" alt="uml diagram"><figcaption>Exemplo Bridge.</figcaption></figure><p>Seguindo essa abordagem nós podemos extrair o código relacionado à cor em sua própria classe com duas subclasses: <code>Red</code> e <code>Blue</code>. A classe <code>Form</code> então ganha um campo de referência apontando para um dos objetos de cor. Agora a forma pode delegar qualquer trabalho referente a cor para o objeto ligado a cor. Aquela referência vai agir como uma ponte entre as classes <code>Form</code> e <code>Color</code>.</p><p>De agora em diante, para adicionar novas cores não será necessário mudar a hierarquia da forma e vice versa.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade" aria-hidden="true">#</a> Aplicabilidade</h2><p>Use o padrão <strong>Bridge</strong> quando:</p><ul><li>Quando você quer dividir e organizar uma classe monolítica (isto é, com elementos muito acoplados, atuando como uma unidade) que tem diversas variantes da mesma funcionalidade;</li><li>Tanto as abstrações como suas implementações tiverem de ser extensíveis por meio de subclasses. Neste caso,o padrão Bridge permite combinar as diferentes abstrações e implementações e estendê-las independentemente;</li><li>Quando você deseja evitar um vínculo permanente entre abstração e implementação, também sendo capaz de trocar de implementação durante o momento de execução;</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura" aria-hidden="true">#</a> Estrutura</h2><figure><img src="https://www.plantuml.com/plantuml/svg/ZLAxRiCm3Dpv5HoJmVs08eETJ5tx1x9Dmm8iKP3eeKZzxw7jFEJ0ACf558ztF0egavWeenkWV6PewYJHD8BDO5B2wdwrxA-06byk3EJ82qUqhtp1E50qS-lXY5gO038wdeenu6MmsW-AMYyKEzDGBddTwYXoEAvAdeMmPX5so5tkQzPouUEDHBx5cRFrm4K-xLDv0EkYtzHPJ-rct-a1NjWtaOGoRhLOVHiwuH-Cy-voEWDpYwVVGcF73cHIzwOzM_zhEmD0Rrj2Sa5-q8X4Muz2AQywafxR1AM-vV9BrlC6" alt="uml diagram"><figcaption>Estrutura Bridge.</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes" aria-hidden="true">#</a> Participantes</h2><ul><li><strong>Abstraction</strong> (Form) <ul><li>define a interface da abstração;</li><li>mantém uma referência para um objeto do tipo Implementor;</li></ul></li><li><strong>RefinedAbstraction</strong> (Circle, Square) <ul><li>estende a interface definida por Abstraction;</li></ul></li><li><strong>Implementor</strong> (Color) <ul><li>define a interface para as classes de implementação. As duas interfaces podem ser bem diferentes. A interface de Implementor fornece somente operações primitivas e Abstraction define operações de nível mais alto baseadas nessas primitivas;</li></ul></li><li><strong>ConcreteImplementor</strong> (Blue, Red) <ul><li>implementa a interface de Implementor e define sua implementação concreta;</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes" aria-hidden="true">#</a> Colaborações</h2><ul><li>Abstraction repassa as solicitações dos clientes para o seu objeto Implementor.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias" aria-hidden="true">#</a> Consequências</h2><p>O padrão Bridge tem os seguintes benefícios e desvantagens:</p><h3 id="beneficios" tabindex="-1"><a class="header-anchor" href="#beneficios" aria-hidden="true">#</a> Benefícios</h3><ol><li>Possibilita a extensão das hierarquias de Abstraction e Implementor independentemente.</li><li>O código do cliente trabalha somente com abstrações em alto nível, isolando o cliente de detalhes de implementação.</li><li>Princípio aberto/fechado: Permite adicionar novas abstrações e implementações independentemente uma das outras.</li><li>Desacopla a interface da implementação. Uma implementação não fica presa a uma interface. Possibilitando um objeto mudar sua implementação em tempo de execução.</li></ol><h3 id="desvantagens" tabindex="-1"><a class="header-anchor" href="#desvantagens" aria-hidden="true">#</a> Desvantagens</h3><ol><li>Por utilizar uma classe altamente coesa através da hierarquia complexa de classes o código pode ficar muito complicado.</li></ol><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao" aria-hidden="true">#</a> Implementação</h2><p>Eis um exemplo para representar a implementação do padrão Bridge em java:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Abstraction</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Implementor</span> implementor<span class="token punctuation">;</span>

    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Exemplo de <code>extends</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RefinedAbstraction</span> <span class="token keyword">extends</span> <span class="token class-name">Abstraction</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Implementor</span> implementor<span class="token punctuation">;</span>
    
    <span class="token class-name">RefinedAbstraction</span><span class="token punctuation">(</span><span class="token class-name">Implementor</span> implementor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>implementor <span class="token operator">=</span> implementor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImplementor</span><span class="token punctuation">(</span><span class="token class-name">Implementor</span> implementor<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>implementor <span class="token operator">=</span> implementor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      implementor<span class="token punctuation">.</span><span class="token function">operationImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Classe responsável pela implementação:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Implementor</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">operationImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Com isto, aqui está um exemplo de um dos ConcreteImplementor que <code>implements</code> esta interface.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteImplementorA</span> <span class="token keyword">implements</span> <span class="token class-name">Implementor</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">boolean</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>called<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Com essas implementações, o código cliente ficaria deste jeito:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token class-name">ConcreteImplementorA</span> implementor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteImplementorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token class-name">RefinedAbstraction</span> refined <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefinedAbstraction</span><span class="token punctuation">(</span>implementor<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    refined<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A depender das próximas implementações, o resultado de <code>refined.operation();</code> seria bem diferente, o que permite a expansão de implementações e abstrações sem a necessidade de mudar as classes anteriores.</p><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo" aria-hidden="true">#</a> Exemplo de código</h2><p>Digamos que você quer representar um tabuleiro de um jogo, existem diferentes formas de tabuleiros e também materiais usados para a confecção, como tabuleiro quadrado de madeira ou tabuleiro circular de plástico. Para os casos onde é antecipada a necessidade da adição de tipos independentes no futuro do projeto, o padrão Bridge faz um bom papel.</p><p>Veja a seguir um UML, seguido do código deste exemplo utilizando o padrão bridge:</p><figure><img src="https://www.plantuml.com/plantuml/svg/bLBBJiCm4BpxA_O8X_815OSAX02fI9LouBonjwrLFuAz5Qb2_nt7JOpfhPVOdfqTpwopYeo1ZzQ8LTb1F6ZNOK0B7Se3xgZXao4891dTpf0G4mvjq2ejWn00s4OEA1camHZX5Isr7eCQKWtW0vc2HWDsseWCgu3VpHuxkhlFP-bjvoFDx8oUXN2U2Gnj6VpsJtcvlA8dyYp_C9NUNJgxh4HEmIWqtgn7U8kIYh6Xll-bBrqLMccDhfAlOWNyeYWjjUs4k4pXMGTfQ2XPP-6rTcFayynhleuOAjwJx-lo6_MuysvscQUc-qOhKXjlJgbKip-zLxV5AQsRz6KjR-wkHl7uirXCkQ_0IyWhi4GJOXvWniSG_v79Mxfhdu83sOvFWCn1jqUcMAEMUEzL5Alqvlddlgo_" alt="uml diagram"><figcaption>Gameboard com materiais utilizando Bridge.</figcaption></figure><p>Código de abstração:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">GameBoard</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">Material</span> material<span class="token punctuation">;</span>

  <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">composeMaterial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Exemplo de <code>extends</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hexagonal</span> <span class="token keyword">extends</span> <span class="token class-name">GameBoard</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Material</span> material<span class="token punctuation">;</span>
    
    <span class="token class-name">Hexagonal</span><span class="token punctuation">(</span><span class="token class-name">Material</span> material<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>material <span class="token operator">=</span> material<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaterial</span><span class="token punctuation">(</span><span class="token class-name">Material</span> material<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>material <span class="token operator">=</span> material<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;drawn a hexagonal shape&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">composeMaterial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      material<span class="token punctuation">.</span><span class="token function">composeExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Exemplo de implementação:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Material</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">composeExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">composeInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Exemplos de <code>implements</code> da interface Material:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wood</span> <span class="token keyword">implements</span> <span class="token class-name">Material</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">boolean</span> external <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">boolean</span> internal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">composeExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      external <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;external wood executed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span><span class="token punctuation">(</span>internal <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        internal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;internal wood canceled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">composeInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      internal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;internal wood executed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token keyword">if</span><span class="token punctuation">(</span>external <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        external <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;external wood canceled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>      
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Plastic</span> <span class="token keyword">implements</span> <span class="token class-name">Material</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">boolean</span> external <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">boolean</span> internal <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">composeExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      external <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;external plastic executed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">composeInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      internal <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;internal plastic executed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Com essas implementações, o código cliente ficaria deste jeito:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	  <span class="token class-name">Wood</span> woodMaterial <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wood</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token class-name">GameBoard</span> hexagonalGameBoard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hexagonal</span><span class="token punctuation">(</span>woodMaterial<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    hexagonalGameBoard<span class="token punctuation">.</span><span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hexagonalGameBoard<span class="token punctuation">.</span><span class="token function">composeMaterial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Respectivas saídas:</span>
    <span class="token comment">// &quot;drawn a hexagonal shape&quot;</span>
    <span class="token comment">// &quot;external wood executed&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A abstração do tipo GameBoard passa a conter um tipo de implementação Material, a partir disto, cada nova implementação ou abstração pode crescer independemente uma da outra, facilitando adições ao projeto.</p><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos" aria-hidden="true">#</a> Usos conhecidos</h2><p><strong>Lists no Java</strong>: O padrão <strong>Bridge</strong> é utilizado no método ToArray na interface List do Java (java.util.List), o método atua como uma ponte entre API&#39;s com base em arrays e API&#39;s com base em collection para a criação de um array.<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><h2 id="padrao-relacionados" tabindex="-1"><a class="header-anchor" href="#padrao-relacionados" aria-hidden="true">#</a> Padrão relacionados</h2>`,60),m=a("h2",{id:"referencias",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#referencias","aria-hidden":"true"},"#"),n(" Referências")],-1),k=a("hr",{class:"footnotes-sep"},null,-1),v={class:"footnotes"},b={class:"footnotes-list"},f=a("li",{id:"footnote1",class:"footnote-item"},[a("p",null,[n("GAMMA, Erich. et al. Padrões de projetos: Soluções reutilizáveis de software orientados a objetos Bookman editora, 2009. "),a("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎")])],-1),h={id:"footnote2",class:"footnote-item"},g={href:"https://docs.oracle.com/javase/8/docs/api/java/util/List.html",target:"_blank",rel:"noopener noreferrer"},w=a("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1);function y(x,j){const e=o("RouterLink"),p=o("ExternalLinkIcon");return c(),l("div",null,[u,a("p",null,[s(e,{to:"/posts/XX_Adapter.html"},{default:t(()=>[n("Adapter")]),_:1}),n(": O padrão Adapter é útil para fazer com que classes não relacionadas trabalhem em conjunto. Ele é normalmente aplicado a sistemas que já foram projetados. Por outro lado, Bridge é definido com antecedência em projetos, pensado desde o início, para permitir que abstrações e implementações possam variar independentemente.")]),a("p",null,[s(e,{to:"/posts/05_Builder.html"},{default:t(()=>[n("Builder")]),_:1}),n(": O padrão Builder e Bridge podem ser combinados: a classe director tem um papel de abstração, enquanto que diferentes construtores agem como implementações.")]),m,k,a("section",v,[a("ol",b,[f,a("li",h,[a("p",null,[n("List - Java Docs: "),a("a",g,[n("docs.oracle.com/javase/8/docs/api/java/util/List"),s(p)]),n(),w])])])])])}const B=i(d,[["render",y],["__file","XX_Bridge.html.vue"]]);export{B as default};
