import{_ as o,X as a,Y as s,a3 as n,a2 as e}from"./framework-26c8dc72.js";const t={},i=e('<h1 id="object-pool" tabindex="-1"><a class="header-anchor" href="#object-pool" aria-hidden="true">#</a> Object Pool</h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup><sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup><sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup><sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup></p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao" aria-hidden="true">#</a> Intenção</h2><p>O Object Pool tem como objetivo reaproveitar objetos, criando pré-instancias de objetos que poderão ser solicitados a qualquer momento.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como" aria-hidden="true">#</a> Também conhecido como</h2><p>Pool de Objetos</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao" aria-hidden="true">#</a> Motivação</h2><p>Por exemplo se trabalhamos com bancos de dados, o processo de criar uma conexão é uma operação cara e pode exigir muito tempo, isso pode vir a sobrecarregar o banco de dados, ou seja, abrir muitas conexões pode afetar o desempenho por diversos motivos, por isso nesse caso seria recomendado a utilização do padrão de projeto <strong>object pool</strong>, que já terá pools de conexões prontas, que poderão ser reutilizadas sempre que um cliente solicitar, sem ter a necessidade de destruir e criar uma nova.</p><figure><img src="https://www.plantuml.com/plantuml/svg/RP5D3i8W48Ntd89b6zCUe35D4rVkZ9w0beabuQV2i32DTvVMHX0x2vZCV3pcGUUGMVHAakwRqH23PCxHaz4Q1XH6psjrYKCiqe8pP3rpqD0RMg7lvOgzoAx6MKroJe54gQxRZ6oeTop7gYh5BiO4R08EOP4c4o3xKoo7eflgU8LmJo-XfNRBNFJAXeSN5dw5Yp825YG4_xl0dykb5ooOR9fjq5447w0cV5A6uJLxZzieIKS1ZeOxqe7cwwzzzZS0" alt="uml diagram"><figcaption>Exemplo Object Pool.</figcaption></figure><p>Quando um cliente precisar consultar o banco de dados, ele poderá instanciar um novo objeto connection especificando o nome do banco de dados que irá chamar o método de consulta que deverá retornar um objeto, enquanto isso o pool executa as seguintes ações:</p><ul><li>Procura um objeto reutilizável disponível e caso seja encontrado será devolvido ao cliente.</li><li>Se nenhum objeto reutilizável for encontrado, ele tenta criar um novo. Se esta ação for bem-sucedida, o novo objeto reutilizável será retornado ao cliente.</li><li>Se o pool não conseguir criar um novo objeto reutilizável, ele aguardará até que um objeto reutilizável seja liberado.</li></ul><p><strong>Connection</strong> - Representa o objeto que é instanciado pelo cliente. Da perspectiva do cliente, este objeto é criado e manipula as operações do banco de dados, é o único objeto visível para o cliente. O cliente não sabe que usa algumas conexões compartilhadas.</p><p><strong>ConnectionImpl</strong> - É o objeto que implementa as operações de banco de dados que são expostas por Connection para o cliente.</p><p><strong>ConnectionPool</strong> - É o que gerencia as conexões com o banco de dados. Ele mantém uma lista de objetos ConnectionImpl e instancia novos objetos, se necessário.</p><p>Lembrando que o cliente é responsável por solicitar o objeto reutilizável, bem como liberá-lo para o pool. Caso esta ação não seja realizada o objeto reutilizável será perdido, sendo considerado indisponível pelo ResourcePool.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade" aria-hidden="true">#</a> Aplicabilidade</h2><p>Use o padrão Object Pool quando:</p><ul><li>Possuir objetos com alto custo e/ou tempo de criação;</li><li>Os objetos que estão sendo usados podem ser reaproveitados;</li><li>Os objetos forem intânciados com muita frequência, ou seja, várias partes do seu aplicativo requerem os mesmos objetos em momentos diferentes.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura" aria-hidden="true">#</a> Estrutura</h2><figure><img src="https://www.plantuml.com/plantuml/svg/PP1B2eCm48RtESKibM8F84M4hWkbFK7K0GFHsCm4RALtR-8ZVMMH6Rul6Vwa99QMNQT56RjQIo8uQeKzuoIUOYKNT2GhlQ1LmtvVH963hz5asTkSZT4v3DYWtxI9NFpE3WSd0NvbXuqLODUEPhEJzSqfYvjFqWLRr2Zf3nFoIOvXy5KzCEda62hae7fEmrEs2pwn-GhYqxNAHyPku3j8Pgignpx51-sGMzEGAB5lvczSwWi0" alt="uml diagram"><figcaption>Estrutura Object Pool.</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes" aria-hidden="true">#</a> Participantes</h2><ul><li><strong>Reusable</strong> (ConnectionImpl) <ul><li>Instâncias dessa classe colaboram com outros objetos por um período de tempo limitado, onde serão compartilhados por vários clientes por um período de tempo limitado e então não são mais necessárias para essa colaboração</li></ul></li><li><strong>Cliente</strong> (Connection) <ul><li>Instâncias dessa classe usam os obejtos reutilizaveis (Reusable Objects).</li></ul></li><li><strong>ReusablePool</strong> (ConnectionPool) <ul><li>Instâncias dessa classes gerenciam os objetos reutilizáveis ​​para utilização pelos clientes, criando e manuseando uma pool de objetos.</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes" aria-hidden="true">#</a> Colaborações</h2><ul><li>O cliente interage com o ReusablePool, para solicitar através do método AcquireReusable() o objeto que deseja utilizar (reusable), o ReusablePool verifica se existe alguma intância do objeto disponivel na pool no momento, e caso tenha, devolve para o cliente e altera o status daquele objeto para &quot;indisponível&quot;, assim ele tem o controle que aquele objeto não pode ser emprestado novamente, até que seja devolvido pelo cliente através do método releaseReusable(), no qual ele coloca o reusable (objeto que foi emprestado) novamente na pool e altera seu status para &quot;disponivel&quot; até o momento que for solicitado novamente.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias" aria-hidden="true">#</a> Consequências</h2><p>O padrão Object Pool tem os seguintes benefícios e desvantagens:</p><ul><li><p><strong>Benefícios</strong></p><ul><li>Oferece um aumento no desempenho.</li><li>Consegue gerenciar as conexões e fornece uma maneira de reutiliza-las e compartilha-las.</li><li>Pode fornecer o limite para o número máximo de objetos que podem ser criados.</li><li>Oferece a possibilidade de alterar o tamanho da pool</li></ul></li><li><p><strong>Desvantagens</strong></p><ul><li>Como existe um limite de objetos na pool, pode ocorrer falta de objetos disponiveis.</li><li>Para que o objeto volte para a pool, o cliente que o estava utilizando, precisa libera-lo, caso não o faça o objeto será perdido e não voltará para a pool.</li><li>Pode ocorrer falhas na politica de aquisição e criação dos recursos.</li><li>A posibilidade de alterar o tamanho da pool também pode gerar alguns problemas, como destruir objetos que estão em uso (caso o tamanho da pool seja diminuido)</li></ul></li></ul><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao" aria-hidden="true">#</a> Implementação</h2><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo" aria-hidden="true">#</a> Exemplo de código</h2>',29),l=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Peca</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> idPeca<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> disponivel<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Peca</span><span class="token punctuation">(</span><span class="token keyword">int</span> idPeca<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>idPeca <span class="token operator">=</span> idPeca<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>disponivel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDisponibilidade</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> disponibilidade<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>disponivel <span class="token operator">=</span> disponibilidade<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getDisponibilidade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disponivel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Monte</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Peca</span><span class="token punctuation">&gt;</span></span> pool_de_pecas<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Peca</span> <span class="token function">pegarPeca</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// disponibiliza a peça para o cliente solicitado</span>
     <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">liberarPeca</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// o cliente devolve a peça, e ela volta para a lista</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos" aria-hidden="true">#</a> Usos conhecidos</h2><p>O ASP.NET Core utiliza o padrão de projeto <strong>object pool</strong> para fazer a reutilização de objetos. É utilizado uma pool de objetos em alguns locais para reutilizar instâncias de StringBuilder, que servem para alocar e gerenciar seus próprios buffers para armazenar dados de caracteres. A ASP.NET Core usa StringBuilder regularmente para implementar recursos, e reutilizá-los oferece um benefício de desempenho.</p><h2 id="padrao-relacionados" tabindex="-1"><a class="header-anchor" href="#padrao-relacionados" aria-hidden="true">#</a> Padrão relacionados</h2><p><em><strong>Factory Method</strong></em> : O padrão Factory Method pode ser usado para encapsular a lógica de criação de objetos. No entanto, ele não os gerencia após sua criação, o padrão de object pool rastreia os objetos que ele cria.</p><p><em><strong>Singleton</strong></em> : Object Pools geralmente são implementados como Singletons.</p><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Referências</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Object Pool Design Pattern. [https://sourcemaking.com/design_patterns/object_pool] <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>Object Pool Pattern. [https://www.oodesign.com/object-pool-pattern] <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li><li id="footnote3" class="footnote-item"><p>Best Practice Software Engineering - Object Pool. [http://best-practice-software-engineering.ifs.tuwien.ac.at/patterns/objectpool.html] <a href="#footnote-ref3" class="footnote-backref">↩︎</a></p></li><li id="footnote4" class="footnote-item"><p>Object Pool - Padrões de Projeto. [http://www.csi.uneb.br/padroes_de_projetos/object_pool.html] <a href="#footnote-ref4" class="footnote-backref">↩︎</a></p></li><li id="footnote5" class="footnote-item"><p>Reutilização de objeto com Object Pool no ASP.NET Core. [https://learn.microsoft.com/pt-br/aspnet/core/performance/objectpool?view=aspnetcore-7.0] <a href="#footnote-ref5" class="footnote-backref">↩︎</a></p></li></ol></section>`,10);function r(c,p){return a(),s("div",null,[i,n(" um jogo de damas onde o tabuleiro tem espaços especiais, e caso uma peça pare em cima desse espaço, receberá alguma instrução do que deve ser feito, uma dessas instruções é ganhar uma peça que está no monte (caso aja alguma disponivel), outra intrução é devolver uma peça para o monte caso tenha pego alguma "),l])}const u=o(t,[["render",r],["__file","ObjectPool.html.vue"]]);export{u as default};
