import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as i,a as n,b as s,d as e,e as c}from"./app-ec523e4b.js";const l={},r=c(`<h1 id="object-pool" tabindex="-1"><a class="header-anchor" href="#object-pool" aria-hidden="true">#</a> Object Pool</h1><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup><sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup><sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup><sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup><sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup><sup class="footnote-ref"><a href="#footnote7">[7]</a><a class="footnote-anchor" id="footnote-ref7"></a></sup><sup class="footnote-ref"><a href="#footnote8">[8]</a><a class="footnote-anchor" id="footnote-ref8"></a></sup></p><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao" aria-hidden="true">#</a> Intenção</h2><p>O Object Pool tem como objetivo reaproveitar objetos, criando pré-instancias de objetos que poderão ser solicitados a qualquer momento.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como" aria-hidden="true">#</a> Também conhecido como</h2><p>Pool de Objetos</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao" aria-hidden="true">#</a> Motivação</h2><p>Por exemplo se trabalhamos com bancos de dados, o processo de criar uma conexão é uma operação cara e pode exigir muito tempo, isso pode vir a sobrecarregar o banco de dados, ou seja, abrir muitas conexões pode afetar o desempenho por diversos motivos, por isso nesse caso seria recomendado a utilização do padrão de projeto <strong>object pool</strong>, que já terá pools de conexões prontas, que poderão ser reutilizadas sempre que um cliente solicitar, sem ter a necessidade de destruir e criar uma nova.</p><figure><img src="https://www.plantuml.com/plantuml/svg/RP5H3eCW38RVEKKVDGiUm2p6P1TOiXDKR2O9WfFwi2ox-z0vOMvzWAPVAVyFjMSSUUgDgBSCGYY3tiF9QB9CZwKqnv8yHThYh2N5sjdOTOX5o5faRD1J2HSUjRtcwOpr0YYAAfbKmkJnYqkPyhDpfeI1MWgBmOI8_zBc0r6UF4PIWTfo7msWkarwfDYNvH6EP2WO-e4VJz6yb6wdOXNOwQ2T-e7lW1oUfPcO_9xqn9rhlQZ9jiiFlVSN" alt="uml diagram"><figcaption>Exemplo Object Pool.</figcaption></figure><p>Quando um cliente precisar consultar o banco de dados, ele poderá instanciar um novo objeto connection especificando o nome do banco de dados que irá chamar o método de consulta que deverá retornar um objeto, enquanto isso o pool executa as seguintes ações:</p><ul><li>Procura um objeto reutilizável disponível e caso seja encontrado será devolvido ao cliente.</li><li>Se nenhum objeto reutilizável for encontrado, ele tenta criar um novo. Se esta ação for bem-sucedida, o novo objeto reutilizável será retornado ao cliente.</li><li>Se o pool não conseguir criar um novo objeto reutilizável, ele aguardará até que um objeto reutilizável seja liberado.</li></ul><p><strong>Cliente</strong> - É quem irá utilizar, e também solicitar a connection, para a connectionPool.</p><p><strong>Connection</strong> - Representa o objeto que é instanciado pelo cliente.</p><p><strong>ConnectionPool</strong> - É o que gerencia as conexões com o banco de dados. Ele mantém uma lista de objetos Connection e instancia novos objetos, se necessário.</p><p>Lembrando que o cliente é responsável por solicitar o objeto reutilizável, bem como liberá-lo para o pool. Caso esta ação não seja realizada, o objeto reutilizável será perdido, e será considerado indisponível.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade" aria-hidden="true">#</a> Aplicabilidade</h2><p>Use o padrão Object Pool quando:</p><ul><li>Possuir objetos com alto custo e/ou tempo de criação;</li><li>Os objetos que estão sendo usados podem ser reaproveitados;</li><li>Os objetos forem intânciados com muita frequência, ou seja, várias partes do seu aplicativo requerem os mesmos objetos em momentos diferentes.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura" aria-hidden="true">#</a> Estrutura</h2><figure><img src="https://www.plantuml.com/plantuml/svg/PP1B2eCm48RtESKibM8F84M4hWkbFK7K0GFHsCm4RALtR-8ZVMMH6Rul6Vwa99QMNQT56RjQIo8uQeKzuoIUOYKNT2GhlQ1LmtvVH963hz5asTkSZT4v3DYWtxI9NFpE3WSd0NvbXuqLODUEPhEJzSqfYvjFqWLRr2Zf3nFoIOvXy5KzCEda62hae7fEmrEs2pwn-GhYqxNAHyPku3j8Pgignpx51-sGMzEGAB5lvczSwWi0" alt="uml diagram"><figcaption>Estrutura Object Pool.</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes" aria-hidden="true">#</a> Participantes</h2><ul><li><strong>Reusable</strong> (Connection) <ul><li>Instâncias dessa classe colaboram com outros objetos por um período de tempo limitado, onde serão compartilhados por vários clientes por um período de tempo limitado e então não são mais necessárias para essa colaboração</li></ul></li><li><strong>Cliente</strong> (Cliente) <ul><li>Instâncias dessa classe usam os obejtos reutilizaveis (Reusable Objects).</li></ul></li><li><strong>ReusablePool</strong> (ConnectionPool) <ul><li>Instâncias dessa classes gerenciam os objetos reutilizáveis ​​para utilização pelos clientes, criando e manuseando uma pool de objetos.</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes" aria-hidden="true">#</a> Colaborações</h2><ul><li>O cliente interage com o ReusablePool, para solicitar através do método AcquireReusable() o objeto que deseja utilizar (reusable), o ReusablePool verifica se existe alguma intância do objeto disponivel na pool no momento, e caso tenha, devolve para o cliente e altera o status daquele objeto para &quot;indisponível&quot;, assim ele tem o controle que aquele objeto não pode ser emprestado novamente, até que seja devolvido pelo cliente através do método releaseReusable(), no qual ele coloca o reusable (objeto que foi emprestado) novamente na pool e altera seu status para &quot;disponivel&quot; até o momento que for solicitado novamente.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias" aria-hidden="true">#</a> Consequências</h2><p>O padrão Object Pool tem os seguintes benefícios e desvantagens:</p><ul><li><p><strong>Benefícios</strong></p><ul><li>Oferece um aumento no desempenho.</li><li>Consegue gerenciar as conexões e fornece uma maneira de reutiliza-las e compartilha-las.</li><li>Pode fornecer o limite para o número máximo de objetos que podem ser criados.</li><li>Oferece a possibilidade de alterar o tamanho da pool</li></ul></li><li><p><strong>Desvantagens</strong></p><ul><li>Como existe um limite de objetos na pool, pode ocorrer falta de objetos disponiveis.</li><li>Para que o objeto volte para a pool, o cliente que o estava utilizando, precisa libera-lo, caso não o faça o objeto será perdido e não voltará para a pool.</li><li>Pode ocorrer falhas na politica de aquisição e criação dos recursos.</li><li>A posibilidade de alterar o tamanho da pool também pode gerar alguns problemas, como destruir objetos que estão em uso (caso o tamanho da pool seja diminuido)</li></ul></li></ul><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao" aria-hidden="true">#</a> Implementação</h2><p>Uma ideia de uso do padrão de projeto object pool, poderia ser em um jogo de damas, onde existe a opção de recuperar peças que já foram perdida. Cada jogador possui o seu cemitério, onde ficam suas peças que foram &quot;mortas&quot; pelo seu adversario, em certo ponto do jogo é possivel recuperar algumas peças que se encontram no cemitério; Para que não seja necessário criar novas instâncias sempre que um jogador puder recuperar uma peça do cemitério, podemos utilizar o padrão de projeto e deixar uma pool de peças já prontas para serem usadas quando for preciso. Ao termino do jogo, ou quando forem &quot;mortas&quot; novamente, todas as peças serão devolvidas a pool.</p><p>Abaixo podemos ver um exemplo de como ficariam as classes com a utilização do object pool:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Peca</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> idPeca<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Peca</span><span class="token punctuation">(</span><span class="token keyword">int</span> idPeca<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>idPeca <span class="token operator">=</span> idPeca<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        
            <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            
            <span class="token class-name">Peca</span> peca <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Peca</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
            
            <span class="token keyword">return</span> <span class="token punctuation">(</span>peca<span class="token punctuation">.</span>idPeca <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idPeca<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cemiterio</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Peca</span><span class="token punctuation">&gt;</span></span> disponiveisParaUso<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Peca</span><span class="token punctuation">&gt;</span></span> pecasDeVoltaAoJogo<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Peca</span> <span class="token function">pegarPeca</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>disponiveisParaUso<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Peca</span> referencia_em_uso <span class="token operator">=</span> disponiveisParaUsos<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                pecasDeVoltaAoJogo<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>referencia_em_uso<span class="token punctuation">)</span><span class="token punctuation">;</span>
                disponiveisParaUso<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>referencia_em_uso<span class="token punctuation">)</span><span class="token punctuation">;</span>              
                <span class="token keyword">return</span> referencia_em_uso<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>   
    <span class="token keyword">public</span> <span class="token class-name">Peca</span> <span class="token function">liberarPeca</span><span class="token punctuation">(</span><span class="token class-name">Peca</span> pecaDevolvida<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Peca</span> peca <span class="token operator">:</span> pecasDeVoltaAoJogo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>peca<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pecaDevolvida<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                
                pecasDeVoltaAoJogo<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>pecaDevolvida<span class="token punctuation">)</span><span class="token punctuation">;</span>           
                disponiveisParaUso<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pecaDevolvida<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> 
                <span class="token keyword">return</span> pecaDevolvida<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo" aria-hidden="true">#</a> Exemplo de código</h2><p>Código generico de classes quando é utilizado o object pool.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Objeto</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> idObjeto<span class="token punctuation">;</span>
    <span class="token comment">//qualquer outros atributos que o objeto possua</span>
    <span class="token keyword">public</span> <span class="token class-name">Objeto</span><span class="token punctuation">(</span><span class="token keyword">int</span> idObjeto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>idObjeto <span class="token operator">=</span> idObjeto<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        
            <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            
            <span class="token class-name">Objeto</span> objeto <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Objeto</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
            
            <span class="token keyword">return</span> <span class="token punctuation">(</span>objeto<span class="token punctuation">.</span>idObjeto <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idObjeto<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoolDeObjeto</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Objeto</span><span class="token punctuation">&gt;</span></span> disponiveis<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Objeto</span><span class="token punctuation">&gt;</span></span> emUso<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Objeto</span> <span class="token function">pegarObjeto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>disponiveis<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ver se a lista está vazia, caso esteja retorna null</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Peca</span> referencia_em_uso <span class="token operator">=</span> disponiveis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                emUso<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>referencia_em_uso<span class="token punctuation">)</span><span class="token punctuation">;</span>
                disponiveis<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>referencia_em_uso<span class="token punctuation">)</span><span class="token punctuation">;</span>              
                <span class="token keyword">return</span>  referencia_em_uso<span class="token punctuation">;</span> <span class="token comment">// se a lista tem objetos disponiveis, retorna a referencia do objeto para o cliente</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>   
    <span class="token keyword">public</span> <span class="token class-name">Objeto</span> <span class="token function">liberarObjeto</span><span class="token punctuation">(</span><span class="token class-name">Objeto</span> objetoDevolvido<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Objeto</span> objeto <span class="token operator">:</span> emUso<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// verifica se o objeto devolvido está na lista dos objetos que foram emprestados</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>objeto<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>objetoDevolvido<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                emUso<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>objetoDevolvido<span class="token punctuation">)</span><span class="token punctuation">;</span>           
                disponiveis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>objetoDevolvido<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// caso o objeto devolvido esteja na lista emUso, ele volta para a lista de disponiveis</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> 
                <span class="token keyword">return</span> objetoDevolvido<span class="token punctuation">;</span> <span class="token comment">// caso não esteja, o objeto devolvido é retornado para o cliente</span>
        <span class="token punctuation">}</span>             
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos" aria-hidden="true">#</a> Usos conhecidos</h2><ul><li><strong>ASP.NET Core</strong> - É a versão de código aberto da ASP.NET, é uma estrutura de desenvolvimento para aplicativos Web, que utiliza o padrão de projeto <strong>object pool</strong> para fazer a reutilização de objetos. É utilizado uma pool de objetos em alguns locais para reutilizar instâncias de StringBuilder, que servem para alocar e gerenciar seus próprios buffers para armazenar dados de caracteres. A ASP.NET Core usa StringBuilder regularmente para implementar recursos, e reutilizá-los oferece um benefício de desempenho.</li><li><strong>UNITY</strong> - A unity é um motor de jogo (Game Engine) que permite a criação de videojogos para varias plataformas, oferecendo varias ferramentas de criação de jogos e também de aprendizado para o desenvolvedor, dentre essas ferramentas para uso, eles permitem a utilização do padrão de projeto object pool, que como eles descrevem, otimiza os projetos e diminui a carga que é colocada na CPU ao criar e destruir GameObjects repetidas vezes.</li></ul><h2 id="padrao-relacionados" tabindex="-1"><a class="header-anchor" href="#padrao-relacionados" aria-hidden="true">#</a> Padrão relacionados</h2><p><em><strong>Factory Method</strong></em> : O padrão Factory Method pode ser usado para encapsular a lógica de criação de objetos. No entanto, ele não os gerencia após sua criação, o padrão de object pool rastreia os objetos que ele cria.</p><p><em><strong>Singleton</strong></em> : Object Pools geralmente são implementados como Singletons.</p><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Referências</h2><hr class="footnotes-sep">`,43),u={class:"footnotes"},d={class:"footnotes-list"},k={id:"footnote1",class:"footnote-item"},m={href:"https://sourcemaking.com/design_patterns/object_pool",target:"_blank",rel:"noopener noreferrer"},v=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),b={id:"footnote2",class:"footnote-item"},f={href:"https://www.oodesign.com/object-pool-pattern",target:"_blank",rel:"noopener noreferrer"},h=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),j={id:"footnote3",class:"footnote-item"},g={href:"http://best-practice-software-engineering.ifs.tuwien.ac.at/patterns/objectpool.html",target:"_blank",rel:"noopener noreferrer"},w=n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1),_={id:"footnote4",class:"footnote-item"},y={href:"http://www.csi.uneb.br/padroes_de_projetos/object_pool.html",target:"_blank",rel:"noopener noreferrer"},P=n("a",{href:"#footnote-ref4",class:"footnote-backref"},"↩︎",-1),q={id:"footnote5",class:"footnote-item"},O={href:"https://learn.microsoft.com/pt-br/aspnet/core/performance/objectpool?view=aspnetcore-7.0",target:"_blank",rel:"noopener noreferrer"},x=n("a",{href:"#footnote-ref5",class:"footnote-backref"},"↩︎",-1),z={id:"footnote6",class:"footnote-item"},C={href:"https://dotnet.microsoft.com/pt-br/learn/aspnet/what-is-aspnet-core",target:"_blank",rel:"noopener noreferrer"},E=n("a",{href:"#footnote-ref6",class:"footnote-backref"},"↩︎",-1),A={id:"footnote7",class:"footnote-item"},D={href:"https://learn.unity.com/tutorial/introduction-to-object-pooling#",target:"_blank",rel:"noopener noreferrer"},U=n("a",{href:"#footnote-ref7",class:"footnote-backref"},"↩︎",-1),S={id:"footnote8",class:"footnote-item"},R={href:"https://www.devmedia.com.br/unity-3d-introducao-ao-desenvolvimento-de-games/30653",target:"_blank",rel:"noopener noreferrer"},N=n("a",{href:"#footnote-ref8",class:"footnote-backref"},"↩︎",-1);function T(V,I){const a=t("ExternalLinkIcon");return p(),i("div",null,[r,n("section",u,[n("ol",d,[n("li",k,[n("p",null,[s("Object Pool Design Pattern. "),n("a",m,[s("https://sourcemaking.com/design_patterns/object_pool"),e(a)]),s(),v])]),n("li",b,[n("p",null,[s("Object Pool Pattern. "),n("a",f,[s("https://www.oodesign.com/object-pool-pattern"),e(a)]),s(),h])]),n("li",j,[n("p",null,[s("Best Practice Software Engineering - Object Pool. "),n("a",g,[s("http://best-practice-software-engineering.ifs.tuwien.ac.at/patterns/objectpool.html"),e(a)]),s(),w])]),n("li",_,[n("p",null,[s("Object Pool - Padrões de Projeto. "),n("a",y,[s("http://www.csi.uneb.br/padroes_de_projetos/object_pool.html"),e(a)]),s(),P])]),n("li",q,[n("p",null,[s("Reutilização de objeto com Object Pool no ASP.NET Core. "),n("a",O,[s("https://learn.microsoft.com/pt-br/aspnet/core/performance/objectpool?view=aspnetcore-7.0"),e(a)]),s(),x])]),n("li",z,[n("p",null,[s("ASP.NET CORE "),n("a",C,[s("https://dotnet.microsoft.com/pt-br/learn/aspnet/what-is-aspnet-core"),e(a)]),s(),E])]),n("li",A,[n("p",null,[s("Unity - Introduction to Object Pooling "),n("a",D,[s("https://learn.unity.com/tutorial/introduction-to-object-pooling#"),e(a)]),s(),U])]),n("li",S,[n("p",null,[s("Unity 3D - Desenvolvimento de Games "),n("a",R,[s("https://www.devmedia.com.br/unity-3d-introducao-ao-desenvolvimento-de-games/30653"),e(a)]),s(),N])])])])])}const F=o(l,[["render",T],["__file","07_ObjectPool.html.vue"]]);export{F as default};
