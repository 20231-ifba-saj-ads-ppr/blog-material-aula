import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as d,a as i,b as e,d as m,w as n,e as a}from"./app-07a24775.js";const c={},p=a('<h1 id="seminarios-3" tabindex="-1"><a class="header-anchor" href="#seminarios-3" aria-hidden="true">#</a> Semin√°rios 3</h1><h2 id="padroes-comportamentais" tabindex="-1"><a class="header-anchor" href="#padroes-comportamentais" aria-hidden="true">#</a> Padr√µes Comportamentais</h2><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>Os padr√µes comportamentais se preocupam com algoritmos e a atribui√ß√£o de responsabilidades entre objetos. Os padr√µes comportamentais n√£o descrevem apenas padr√µes de objetos ou classes, mas tamb√©m os padr√µes de comunica√ß√£o entre eles. Esses padr√µes caracterizam fluxos de controle dif√≠ceis de seguir em tempo de execu√ß√£o. Eles afastam o foco do fluxo de controle para permitir que voc√™ se concentre somente na maneira como os objetos s√£o interconectados.</p><p>Os padr√µes comportamentais de classe utilizam a heran√ßa para distribuir o comportamento entre classes. Este cap√≠tulo inclui dois padr√µes desse tipo. O Template Method (301) √© o mais simples e o mais comum dos dois. Um m√©todo template √© uma defini√ß√£o abstrata de um algoritmo. Ele define o algoritmo passo a passo. Cada passo invoca uma opera√ß√£o abstrata ou uma opera√ß√£o primitiva. Uma subclasse encarna um algoritmo atrav√©s da defini√ß√£o das opera√ß√µes abstratas. O outro padr√£o comportamental de classe √© Interpreter (231), o qual representa uma gram√°tica como uma hierarquia de classes e implementa um interpretador como uma opera√ß√£o em inst√¢ncias destas classes.</p><p>Os padr√µes comportamentais de objetos utilizam a composi√ß√£o de objetos em vez da heran√ßa. Alguns descrevem como um grupo de objetos-pares cooperam para a execu√ß√£o de uma tarefa que nenhum objeto sozinho poderia executar por si mesmo. Um aspecto importante aqui √© como os objetos-pares conhecem uns aos outros. Os pares poderiam manter refer√™ncias expl√≠citas uns para os outros, mas isso aumentaria o seu acoplamento. Levado ao extremo, cada objeto teria conhecimento de cada um dos demais. O padr√£o Mediator (257) evita essa situa√ß√£o pela introdu√ß√£o de um objeto mediador entre os objetos-pares. Um mediador fornece o referenciamento indireto necess√°rio para um acoplamento fraco.</p><p>O padr√£o Chain of Responsibility (212) fornece um acoplamento ainda mais fraco. Ele permite enviar solicita√ß√µes implicitamente para um objeto atrav√©s de uma cadeia de objetos candidatos. Qualquer candidato pode satisfazer a solicita√ß√£o dependendo de condi√ß√µes em tempo de execu√ß√£o. O n√∫mero de candidatos √© aberto e voc√™ pode selecionar quais candidatos participam da cadeia em tempo de execu√ß√£o.</p><p>O padr√£o Observer (274) define e mant√©m uma depend√™ncia entre objetos. O exemplo cl√°ssico do Observer est√° no Model/View/Controller da Smalltalk, onde todas as vis√µes do modelo s√£o notificadas sempre que o estado do modelo muda.</p>',8),l=a('<h2 id="lista-de-padroes" tabindex="-1"><a class="header-anchor" href="#lista-de-padroes" aria-hidden="true">#</a> Lista de padr√µes</h2><table><thead><tr><th>Padr√£o</th><th>Aluno</th></tr></thead><tbody><tr><td>Chain of Responsibility</td><td>@leandro-costa</td></tr><tr><td>Command</td><td>@leandro-costa</td></tr><tr><td>üÜóInterpreter</td><td>@leandro-costa</td></tr><tr><td>üÜóIterator</td><td>@leandro-costa</td></tr><tr><td>Mediator</td><td>@LuisADS8</td></tr><tr><td>Memento</td><td>@FabricioLuisdeSousaSantos</td></tr><tr><td>üÜóObserver</td><td>@leandro-costa</td></tr><tr><td>State</td><td>@GabrielCoffee9</td></tr><tr><td>Strategy</td><td>@leandro-costa</td></tr><tr><td>Template Method</td><td>@AmandaSerpa</td></tr><tr><td>Visitor</td><td>@SarahPithon</td></tr></tbody></table><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias" aria-hidden="true">#</a> Refer√™ncias</h2><p>https://dzone.com/articles/the-observer-pattern-using-modern-java</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>GAMMA, Erich. et al. Padr√µes de projetos: Solu√ß√µes reutiliz√°veis de software orientados a objetos Bookman editora, 2009. <a href="#footnote-ref1" class="footnote-backref">‚Ü©Ô∏é</a></p></li></ol></section>',6);function u(f,h){const o=s("RouterLink");return r(),d("div",null,[p,i("p",null,[e("Outros padr√µes comportamentais de objetos se preocupam com o encapsulamento de comportamento em um objeto e com a delega√ß√£o de solicita√ß√µes para ele. O padr√£o "),m(o,{to:"/posts/04_Strategy.html"},{default:n(()=>[e("Strategy")]),_:1}),e(" encapsula um algoritmo num objeto. Strategy torna f√°cil especificar e mudar o algoritmo que um objeto usa. O padr√£o Command (222) encapsula uma solicita√ß√£o num objeto, de maneira que possa ser passada como um par√¢metro, armazenada numa lista hist√≥rica ou manipulada de outras formas. O padr√£o State (284) encapsula os estados de um objeto, de maneira que o objeto possa mudar o seu comportamento quando o seu objeto-estado mudar. Visitor (305) encapsula comportamento que, de outra forma, seria distribu√≠do entre classes, Iterator (244) abstrai a maneira como objetos de um agregado s√£o acessados e percorridos.")]),l])}const v=t(c,[["render",u],["__file","Comportamentais.html.vue"]]);export{v as default};
