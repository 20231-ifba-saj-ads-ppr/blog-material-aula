import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,a as s,d as n,w as t,b as a,e as r}from"./app-a99356c2.js";const u={},d=r(`<h1 id="factory-method-gof" tabindex="-1"><a class="header-anchor" href="#factory-method-gof" aria-hidden="true">#</a> Factory Method (GOF)</h1><h2 id="intencao" tabindex="-1"><a class="header-anchor" href="#intencao" aria-hidden="true">#</a> Intenção</h2><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>Definir uma interface para criar um objeto, mas deixar as subclasses decidirem que classe instanciar. O Factory Method permite adiar a instanciação para subclasses.</p><h2 id="tambem-conhecido-como" tabindex="-1"><a class="header-anchor" href="#tambem-conhecido-como" aria-hidden="true">#</a> Também conhecido como</h2><p>Virtual Constructor.</p><h2 id="motivacao" tabindex="-1"><a class="header-anchor" href="#motivacao" aria-hidden="true">#</a> Motivação</h2><p>Os frameworks utilizam classes abstratas para definir e manter relacionamentos entre objetos, eles também são responsáveis pela criação desses objetos.</p><p>Considere um cenário onde existe um framework desenvolvido para criar aplicações que permitam aos usuários lidar com vários documentos. Duas abstrações-chave nesse framework são as classes <code>Application</code> (Aplicação) e <code>Document</code> (Documento). As duas classes são abstratas, e os clientes devem criar subclasses para realizar suas implementações específicas para a aplicação. Por exemplo, para criar uma aplicação de desenho, criamos as classes <code>DrawingApplication</code> e <code>DrawingDocument</code>. A classe Application é responsável pelo gerenciamento dos documentos e pode criá-los quando necessário, por exemplo, quando o usuário seleciona Open (Abrir) ou New (Novo) no Menu.</p><p>No entanto, a classe Application não pode prever qual subclasse de Document será necessária, já que essa escolha é específica para cada aplicação. A classe Application sabe apenas quando um documento deve ser criado, mas não tem conhecimento sobre qual tipo de Document deve ser instanciado. Isso gera um dilema: o framework precisa criar instâncias de classes, mas só possui conhecimento sobre as classes abstratas, as quais não podem ser instanciadas diretamente.</p><p>É aí que o padrão Factory Method oferece uma solução para esse problema. Ele encapsula o conhecimento sobre qual subclasse de Document deve ser criada e transfere essa responsabilidade para fora do framework.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>

<span class="token comment">// Classe abstrata Document</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>
    <span class="token comment">// Métodos abstratos que devem ser implementados pelas subclasses</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// Classe concreta DrawingDocument</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawingDocument</span> <span class="token keyword">extends</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>
    <span class="token comment">// Atributos</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Código para criar documento</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Código para abrir documento</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Código para fechar documento</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Código para salvar documento</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Código para criar documento</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// Classe abstrata Application</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token comment">// Factory Method que cria instâncias de Document</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Document</span> <span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Métodos responsáveis por gerenciar os documentos</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">newDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// Classe concreta DrawingApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawingApplication</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Document</span> <span class="token function">createDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DrawingDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// Exemplo de uso do framework</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Application</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawingApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        application<span class="token punctuation">.</span><span class="token function">createDocuments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>No código acima criado de acordo com o cenário estabelecido temos a classe abstrata <code>Document</code> que define a estrutura de um documento e a classe <code>DrawingDocument</code> que é uma implementação da classe <code>Document</code>.</p><p>A classe <code>Application</code> representa o framework que possui o Factory Method <code>createDocument()</code>, que tem o objetivo de criar instâncias de documentos (<code>Document</code>). O framework não tem conhecimento de qual subclasse de <code>Document</code> será necessária, então ela delega toda responsabilidade para as classes concretas, como <code>DrawingApplication</code>, que implementa o método <code>createDocument()</code> retornando uma instância de <code>DrawingDocument</code>.</p><p>Esse exemplo demonstra a flexibilidade que o padrão Factory Method pode entregar, onde permite que o framework crie objetos sem conhecer a subclasse específica que deve ser instanciada.</p><h2 id="aplicabilidade" tabindex="-1"><a class="header-anchor" href="#aplicabilidade" aria-hidden="true">#</a> Aplicabilidade</h2><p>Use o padrão Factory Method quando:</p><ul><li>Uma classe não pode antecipar a classe de objetos que deve criam;</li><li>Uma classe quer que suas subclasses especifiquem os objetos que criam;</li><li>Classes delegam responsabilidade para uma dentre várias subclasses auxiliares, e você quer localizar o conhecimento de qual subclasse auxiliar que é a delegada;</li><li>Quando não souber de antemão os tipos e dependências exatas dos objetos com os quais seu código deve funcionar;</li><li>Quando desejar fornecer aos usuários da sua biblioteca ou framework uma maneira de estender seus componentes internos.</li></ul><h2 id="estrutura" tabindex="-1"><a class="header-anchor" href="#estrutura" aria-hidden="true">#</a> Estrutura</h2><figure><img src="https://www.plantuml.com/plantuml/svg/VL712i8m3BtdAtBKm_O1Cc4WU1FzXRf6LzZQaQR8cFwxTGxHRjXBafUybnTQUb4ieMsW_6J62l55LOGdTZfKCi030Af6UOyxPoiceQKManB70s1yaH_p_a1IExrQZvYonuvOYN4s8dFDlmAlyMaf5lSyJvr0KcEHfS8mnSZFvita3B1E2DbSQzbWDsbkSP_OMhpWXnlnm1OjtMQM0MgZ2Qdjf4SbmkOSXFmtsewBV1mjoUhnezxn2G00" alt="uml diagram"><figcaption>Estrutura Factory Method.</figcaption></figure><h2 id="participantes" tabindex="-1"><a class="header-anchor" href="#participantes" aria-hidden="true">#</a> Participantes</h2><ul><li><strong>Product</strong> (Document) <ul><li>define a interface de objetos que o método fábrica cria.</li></ul></li><li><strong>ConcreteProduct</strong> (MyDocument) <ul><li>implementa a interface de Product.</li></ul></li><li><strong>Creator</strong> (Application) <ul><li>Declara o método fábrica, o qual retorna um objeto do tipo Product. Creator pode também definir uma implementação por omissão do método factory que retorna por omissão um objeto ConcreteProduct.</li><li>Pode chamar o método factory para criar um objeto Product.</li></ul></li><li><strong>ConcreteCreator</strong> (MyApplication) <ul><li>Redefine o método-fábrica para retornar a uma instância de um ConcreteProduct.</li></ul></li></ul><h2 id="colaboracoes" tabindex="-1"><a class="header-anchor" href="#colaboracoes" aria-hidden="true">#</a> Colaborações</h2><ul><li>Creator depende das suas subclasses para definir o método fábrica de maneira que retorne uma instância do ConcreteProduct apropriado.</li></ul><h2 id="consequencias" tabindex="-1"><a class="header-anchor" href="#consequencias" aria-hidden="true">#</a> Consequências</h2><h3 id="vantagens" tabindex="-1"><a class="header-anchor" href="#vantagens" aria-hidden="true">#</a> Vantagens</h3><ul><li><p>O Factory Method elimina a necessidade de anexar classes específicas das aplicações no código. O código lida somente com a interface de Product; portanto, ele pode trabalhar com quaisquer classe ConcreteProduct definidas pelo usuário.</p></li><li><p>Fornece ganchos para subclasses. Criar objetos dentro de uma classe com um método fábrica é sempre mais flexível do que criar um objeto diretamente. Factory Method dá às subclasses um gancho para fornecer uma versão estendida de um objeto.</p></li><li><p>Conecta hierarquias de classe paralelas. Nos exemplos que consideramos até aqui o método-fábrica é somente chamado por Creators. Mas isto não precisa ser obrigatoriamente assim; os clientes podem achar os métodos-fábrica úteis, especialmente no caso de hierarquias de classe paralelas. Hierarquias de classe paralelas ocorrem quando uma classe delega alguma das suas responsabilidades para uma classe separada.</p></li></ul><h3 id="desvantagens" tabindex="-1"><a class="header-anchor" href="#desvantagens" aria-hidden="true">#</a> Desvantagens</h3><ul><li>Uma desvantagem em potencial dos métodos fábrica é que os clientes podem ter que fornecer subclasses da classe Creator somente para criar um objeto ConcreteProduct em particular. Usar subclasses é bom quando o cliente tem que fornecer subclasses a Creator de qualquer maneira, caso contrário, o cliente deve lidar com outro ponto de evolução.</li></ul><h2 id="implementacao" tabindex="-1"><a class="header-anchor" href="#implementacao" aria-hidden="true">#</a> Implementação</h2><p><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><p>Considere os passos à seguir, para aplicar o padrão Factory Method:</p><ol><li><p>Faça todos os produtos implementarem a mesma interface. Essa interface deve declarar métodos que fazem sentido em todos os produtos.</p></li><li><p>Adicione um método fábrica vazio dentro da classe criadora. O tipo de retorno do método deve corresponder à interface comum do produto.</p></li><li><p>No código da classe criadora, encontre todas as referências aos construtores de produtos. Um por um, substitua-os por chamadas ao método fábrica, enquanto extrai o código de criação do produto para o método fábrica.</p><ul><li>Pode ser necessário adicionar um parâmetro temporário ao método fábrica para controlar o tipo de produto retornado.</li></ul></li><li><p>Crie um conjunto de subclasses criadoras para cada tipo de produto listado no método fábrica. Sobrescreva o método fábrica nas subclasses e extraia os pedaços apropriados do código de construção do método base.</p></li><li><p>Se houver muitos tipos de produtos e não fizer sentido criar subclasses para todos eles, você poderá reutilizar o parâmetro de controle da classe base nas subclasses.</p></li><li><p>Se, após todas as extrações, o método fábrica base ficar vazio, você poderá torná-lo abstrato. Se sobrar algo, você pode tornar isso em um comportamento padrão do método.</p></li></ol><h2 id="exemplo-de-codigo" tabindex="-1"><a class="header-anchor" href="#exemplo-de-codigo" aria-hidden="true">#</a> Exemplo de código</h2><p>No cenário do código a seguir, retrata uma empresa de transportes que contém carros e motos. A empresa busca atender passageiros da cidade, pegando a pessoa e levando para o destino desejado. Como a empresa contém vários carros e motos, foi criada uma fábrica para cada tipo de transporte.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transportes</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pegarPassageiro</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomePassageiro<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levarPassageiro</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomePassageiro<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pararTransporte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Moto</span> <span class="token keyword">implements</span> <span class="token class-name">Transportes</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> nomeTransporte<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Moto</span> <span class="token punctuation">(</span><span class="token class-name">String</span> nomeTransporte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nomeTransporte <span class="token operator">=</span> nomeTransporte<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pegarPassageiro</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomePassageiro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica do método...</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A caminho do passageiro(a): &quot;</span> <span class="token operator">+</span> nomePassageiro<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levarPassageiro</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomePassageiro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica do método...</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Levando passageiro(a) &quot;</span> <span class="token operator">+</span> nomePassageiro <span class="token operator">+</span> <span class="token string">&quot; ao seu destino.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pararTransporte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica do método...</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Parando transporte&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Carro</span> <span class="token keyword">implements</span> <span class="token class-name">Transportes</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> nomeTransporte<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Carro</span> <span class="token punctuation">(</span><span class="token class-name">String</span> nomeTransporte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nomeTransporte <span class="token operator">=</span> nomeTransporte<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pegarPassageiro</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomePassageiro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica do método...</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A caminho do passageiro(a): &quot;</span> <span class="token operator">+</span> nomePassageiro<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levarPassageiro</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomePassageiro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica do método...</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Levando passageiro(a) &quot;</span> <span class="token operator">+</span> nomePassageiro <span class="token operator">+</span> <span class="token string">&quot; ao seu destino.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pararTransporte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Lógica do método...</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Parando transporte&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FactoryTransportes</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Transportes</span> <span class="token function">criarTransporte</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomeTransporte<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMoto</span> <span class="token keyword">extends</span> <span class="token class-name">FactoryTransportes</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Transportes</span> <span class="token function">criarTransporte</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomeTransporte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Moto</span><span class="token punctuation">(</span>nomeTransporte<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryCarro</span> <span class="token keyword">extends</span> <span class="token class-name">FactoryTransportes</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Transportes</span> <span class="token function">criarTransporte</span><span class="token punctuation">(</span><span class="token class-name">String</span> nomeTransporte<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Carro</span><span class="token punctuation">(</span>nomeTransporte<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FactoryCarro</span> fabricaCarros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryCarro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Carro</span> gol <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Carro</span><span class="token punctuation">)</span> fabricaCarros<span class="token punctuation">.</span><span class="token function">criarTransporte</span><span class="token punctuation">(</span><span class="token string">&quot;Gol vermelho&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gol<span class="token punctuation">.</span><span class="token function">levarPassageiro</span><span class="token punctuation">(</span><span class="token string">&quot;João&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Carro</span> uno <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Carro</span><span class="token punctuation">)</span> fabricaCarros<span class="token punctuation">.</span><span class="token function">criarTransporte</span><span class="token punctuation">(</span><span class="token string">&quot;Uno preto&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        uno<span class="token punctuation">.</span><span class="token function">pegarPassageiro</span><span class="token punctuation">(</span><span class="token string">&quot;Maria&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Moto</span> biz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Moto</span><span class="token punctuation">)</span> fabricaCarros<span class="token punctuation">.</span><span class="token function">criarTransporte</span><span class="token punctuation">(</span><span class="token string">&quot;Honda Biz 125&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        biz<span class="token punctuation">.</span><span class="token function">levarPassageiro</span><span class="token punctuation">(</span><span class="token string">&quot;Ana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usos-conhecidos" tabindex="-1"><a class="header-anchor" href="#usos-conhecidos" aria-hidden="true">#</a> Usos conhecidos</h2><ul><li><p>Sistemas de Interface Gráfica do Usuário, muitos sistemas que envolvem interfaces gráficas, utilizam o Factory Method para criar objetos de componentes de interface do usuário, como botões, caixas de texto e janelas.</p></li><li><p>A classe <code>View</code> do framework Model/View/Controller no Smalltalk-80, tem um método chamado defaultController, responsável por criar uma instância controlador. Isso pode parecer com o método fábrica, mas a verdadeira implementação do método fábrica é encontrada no método defaultControllerClass, que retorna a classe da qual defaultController cria instâncias.</p></li><li><p>Sistema ORB Orbix da IONA Technologies[ION94], utiliza do padrão Factory Method para criar tipos apropriados de proxy, quando um objeto utiliza solicita uma referência para um objeto remoto. O padrão facilita a substituição do proxy padrão para um outro que seja adequado para a interação.</p></li></ul><h2 id="padrao-relacionados" tabindex="-1"><a class="header-anchor" href="#padrao-relacionados" aria-hidden="true">#</a> Padrão relacionados</h2>`,39),m=s("li",null,"[Template Methods]: Template Method e Factory Method podem ser utilizados juntos da seguinte maneira, o Factory Method é utilizado dentro do Template Method, possibilitando a criação de objetos específicos durante a execução de um algoritmo.",-1),k=s("h2",{id:"referencias",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#referencias","aria-hidden":"true"},"#"),a(" Referências")],-1),v=s("hr",{class:"footnotes-sep"},null,-1),b={class:"footnotes"},f={class:"footnotes-list"},h=s("li",{id:"footnote1",class:"footnote-item"},[s("p",null,[a("GAMMA, Erich. et al. Padrões de projetos: Soluções reutilizáveis de software orientados a objetos Bookman editora, 2009. "),s("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎")])],-1),y={id:"footnote2",class:"footnote-item"},g={href:"https://refactoring.guru/pt-br/design-patterns",target:"_blank",rel:"noopener noreferrer"},w=s("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1);function q(x,C){const e=o("RouterLink"),c=o("ExternalLinkIcon");return i(),l("div",null,[d,s("ul",null,[s("li",null,[n(e,{to:"/posts/06_Abstract_Factory.html"},{default:t(()=>[a("Abstract Factory")]),_:1}),a(": Abstract Factory e Factory Method podem ser combinados de maneira que o Abstract Factory cria famílias de objetos dependentes, sem que seja necessário especificar suas classes concretas e o Factory Method pode ser utilizado para criar objetos individuais dentro dessas famílias.")]),m,s("li",null,[n(e,{to:"/posts/Prototype.html"},{default:t(()=>[a("Prototype")]),_:1}),a(": Prototype e Factory Method podem ser combinados quando se cria um objeto protótipo dentro do método fábrica, sendo assim os objetos são clonados sem que seja necessário criar o objeto do zero, após clonar você pode fazer a alterações necessárias.")])]),k,v,s("section",b,[s("ol",f,[h,s("li",y,[s("p",null,[a("Mergulho nos Padrões de Projeto, "),s("a",g,[a("https://refactoring.guru/pt-br/design-patterns"),n(c)]),a(),w])])])])])}const j=p(u,[["render",q],["__file","Factory Method.html.vue"]]);export{j as default};
